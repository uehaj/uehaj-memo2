{"componentChunkName":"component---src-templates-blog-template-js","path":"/260f188851045cc091ac","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/040fa6a5-ce1b-508a-4188-cbe338b1c1ef.gif\" /></td>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/e9ab5ed6-d800-c7f9-acd3-31c2afc2666e.gif\" /></td>\n</tr>\n<tr>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/8a144326-7fb8-b8b9-07f7-a332add19764.gif\" /></td>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/c9d55e89-2034-97a6-21dd-c4308734cab4.gif\" /></td>\n</tr>\n<tr>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/4558dd53-12af-3b37-ed10-13f06d5bca51.gif\" /></td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong><em>🎄メリークリスマスイブ!🎄</em></strong> この記事は、<a href=\"https://www.react-spring.io/\">React-Spring</a><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>というアニメーションのライブラリを紹介する <a href=\"https://qiita.com/advent-calendar/2019/ntt-tx\">NTTテクノクロス Advent Calendar 2019</a> の24日目の記事です。23日目は<a href=\"https://qiita.com/yuitomo/items/390cced1122a1b01f37f\">@yuitomo</a>さんの記事、明日25日最終日は@korodroidさんの記事です。</p>\n<img src=\"https://user-images.githubusercontent.com/619186/51572411-7e04a880-1e8c-11e9-802c-251f150a1e69.gif\" width=\"80%\" /> \n[^1]: ロゴ画像はhttps://user-images.githubusercontent.com/619186/51572411-7e04a880-1e8c-11e9-802c-251f150a1e69.gif より引用\n<p>2019年、令和初の年末も押しせまってまいりましたが、みなさん如何おすごしでしょうか? NTTテクノクロスの上原と申します。React/Gatsbyを用いた社内キュレーションサイトの構築や運用などを担当しています。当社では上記含め、SPAの開発にReactが採用されるケースも比較的多く、<a href=\"https://www.ntt-tx.co.jp/column/dojo_review_blog/20170511/?utm_source=qiita&#x26;utm_medium=ac2019&#x26;utm_campaign=24\">社外ブログにReactVRの記事</a>を書いたり、去年のアドベントカレンダーイベントではGatsbyの記事「<a href=\"/uehaj-memo2/1b7f0a86596353587466\">Reactベース静的サイトジェネレータGatsbyの真の力をお見せします</a>」を書いたりしております。</p>\n<h1>はじめに</h1>\n<p>Webサイトの要所にあるアニメーションって、効果的に使えばかっこいいですよね。</p>\n<p>でも、アニメーションって作るのは結構難しいです。私もですが、今まで修得を試みたものの挫折した経験がある方もいらっしゃるのではないかと思います。まあ出来合いの画面ライブラリでなんとかなっちゃう時も少なくないわけですが、シュッとした動きが思い通りにつけられたらなあ、とも常々おもっておりました。</p>\n<p>そんな昨今、<a href=\"https://www.react-spring.io/\">React-Spring</a>というモダンなReact用の人気の高いアニメーショライブラリ<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>を見つけて、<strong><em>Reactであれば! Hooksであれば!</em></strong>理解できそうなので(理解したとは言っていない)、解説記事を書いてみました。\n<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>: GitHubスター数15.4k(2019年12月現在)となかなかの人気なのではないかと思います。</p>\n<h2>対象読者</h2>\n<p>React経験者の方。Hooksの経験があるとなおよい。CSS Transitionとかの経験は不要である。</p>\n<h2>この文章の位置付け</h2>\n<p>本文書は<a href=\"https://www.react-spring.io/docs/\">react-spring公式ドキュメント</a>の代替を目指してはいません。ただ、公式ドキュメントはおそらく要点を絞りこみすぎていて、他のアニメーションライブラリやイージングライブラリの使用経験がないと、いきなり読みくだし理解することは難しいと感じました。本書では基本に立ちかえった説明をし、また公式に抜けている「概念の説明」に重点をおいて、導入時に併読することで有用であることを目指しています。</p>\n<p>本文書は筆者が調査したり類推した内容を含んでおり、間違いを含む可能性があります。問題がありましたら、ご連絡いただけますと幸いです。</p>\n<h1>アニメーションとは何か</h1>\n<blockquote>\n最初にアニメーションの基本について説明します。不要であれば「<a href=\"/260f188851045cc091ac#react-spring%E3%81%AE%E7%B4%B9%E4%BB%8B\">react-springの紹介</a>」まで読み飛ばしてください。\n</blockquote>\n<p>「アニメーション」とは、広義には絵を初めとする本来動かないものを動くように見せる映像表現のことです。ブラウザで表示しているページがスクロールしたり、ブラウザウィンドウをドラッグして移動させる、なども大きな意味では立派なアニメーションです。アニメーションGIFだってアニメーションです。</p>\n<p>その部分集合として、react-springが扱う「アニメーション」とは、「DOMで表示されている画面上のオブジェクトの<strong>色や属性などが連続的に変化する</strong>」というものです。DOMアニメーションとCSSアニメーションの両方を含むものと考えてください。動画やGIFアニメの再生は対象外です。</p>\n<h2>「連続的に変化する」とはどういうことか</h2>\n<p>一般に、CSSやDOMをJavaScriptから更新すると、その設定内容は「瞬時に」「離散的に」変化します。途中経過がないのです。こんな感じです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">●            →           ◯\n\n     一瞬で変化する</code></pre></div>\n<p>厳密には一瞬ではないでしょうが、ブラウザはさまざまな再計算やレンダリングを行い「最終結果」を表示するための処理を一目散に行います。</p>\n<p>これに対してreact-springの意味で「アニメーション」として表示することは、以下のように表示するということです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">● → ● → ● → ..◯ → ◯ →◯ → ◯\n\n   細かい単位(1/60秒ごとに)で変化する</code></pre></div>\n<p>1/60秒ごと(60Hz)というのは一般的なPCやMacでのリフレッシュレート、すなわち画面変化が物理的に視認できる最短の時間間隔です。この間隔でフレームバッファからディスプレイに情報が転送されるので、この単位よりも細かく画面を変化させることはできません。ちなみに、Oculus RiftやHTC ViveなどのVRヘッドマウントディスプレイでは、リフレッシュレートは90Hzであり、どんなディスプレイでも60Hzであるわけではありません。</p>\n<h2>連続的変化を表現するための方法</h2>\n<p>表示する画像をパラパラ漫画のように、たとえば60枚の画像を用意して1秒間に切り替えれば1杪分のアニメーションを表現できます。しかし容量は大きくなるでしょうし、前述のようにリフレッシュレートが異なるケースがあることも考えれば望ましくありません。</p>\n<p>なので、一般にブラウザのUIのアニメーションでは以下のようにします。</p>\n<ol>\n<li>ブラウザ内の表示要素の「動き」の元になるものとして、DOM要素の<strong><em>位置</em></strong>、<strong><em>大きさ</em></strong>、<strong><em>透明度</em></strong>などに使用する<strong><em>実数値</em></strong>をピックアップします。</li>\n<li>その値を、時刻を引数とする関数値と考えます</li>\n<li>\n<p>なんらかの方法でその関数を実装します。たとえば、<br /><ul></p>\n<li> 現在の値と最終値を与え、その間を補完する値を返す関数を生成する\n<li> その値変化に対応する、JavaScriptの関数を定義する</ul>\n</li>\n<li>\n<p>1/60秒間隔で以下の処理を実行する<br /><ul></p>\n<li> 上記関数のその時点での値を決定し、</li>\n<li> DOMの属性をその値で更新する </li></ul>\n</li>\n</ol>\n<p>このように関数もしくは計算式で定義すれば、間隔が60Hzであろうが120Hzであろうが一般的に定義できます。あるいはCPUが重くて処理が表示においつかなかった場合でも、更新を間引いて間隔を長くすることでなめらかさは劣るとしても動きとしては正しいアニメーションを表示することができます。</p>\n<p>と、言葉では簡単そうですが、問題はこの関数を定義するのが難しいことです。単純な一次関数では自然な動きになりません。その問題を解決する適切な関数を生成する機能をもっているのがアニメーションライブラリであり、イージングライブラリ<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>です。</p>\n<h1>react-springの紹介</h1>\n<p>ということでここからが本題です。react-springは、DOMアニメーションやCSSアニメーションを行うためのReactライブラリです。以下の特徴をもっています。</p>\n<ul>\n<li>\n<h3>💐宣言的アニメーション</h3>\n* 「最終的にはこうなる」や「この時はこうする」といったルールを設定で指定するだけでアニメーションを表現します。「なにかのメソッドを呼び出したら、ここに位置を移動する」とかはありません。「アニメーションのタイムラインのx杪目を実行中」みたいな概念もありません。Reactが「宣言的UI」であるのと同様に、宣言的にアニメーションを指定します。\n</li>\n<li>\n<h3>💐物性ベースのタイミング指定</h3>\n* 従来のアニメーションライブラリだと、アニメーションのタイミングや移動速度などは、継続時間とベジエ曲線(イージング関数)で指定するのが普通でした。これに対してreact-springでは***慣性、摩擦力、張力をもった物理的な性質(物性)***でタイミングを指定します。[こちら](https://www.react-spring.io/docs/hooks/api#configs)で各パラメータをいじって試せます。<br/>\nどういうことか？<br/>\n    * 張力が強いバネなら、シュと戻り、摩擦力が高いと、ジワーっと移動します。慣性が大きいと、ふんぬっ、ぬお〜、と一拍おく感じで物体が動きはじめます。張力が高いと、ビッビッと力強い動きをします。そういう感じに、コンピュータ上の図形の変化でも、物理的なモノがあるかのような動きをさせるのです。\n    * 移動時間を2.5杪にするか、1.5杪にするかなどは、天才アニメーターじゃないんだから常人には考えても答えなんかわかりません。バネのようにビョーンなのか、ハチミツのようにニチャーっと動くのか、という風に直感的に指定します。\n    * Appleの元UI-Kit開発者、Andy Matuschakは以下のように言っているそうです<br />\n     <blockquote>[継続時間とイージング曲線を引数とするアニメーションAPIは、継続的でなめらからなインタラクティブ性に根本的に反するものである。](https://twitter.com/andy_matuschak/status/566736015188963328)</bloclquote>\n    * easing関数を指定する選択肢も[ある](https://www.react-spring.io/docs/hooks/api#Configs)。\n</li>\n<li>\n<h3>💐React Hooksベース/TypeScript対応</h3>\n* HooksベースのAPIが使用できます[^4]。当然TypeScirpt対応です。\n</li>\n<li>\n<h3>💐React Native対応。</h3>\n* Webだけではなく、react-native, react-native-webの開発をサポートします。\n</li>\n</ul>\n<h1>やってみようReact-Spring</h1>\n<table>\n<thead>\n<tr>\n<th align=\"left\">　　　　　　　　　　　　⚠注意!⚠</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">react-springのバージョンは、原稿執筆時の最新stableのv8ではなく、次期版であるv9ベースのものを使用してください。v8には特にTypeScriptの型定義に致命的な問題があります。「yarn add react-spring@next」 でインストールできます。</td>\n</tr>\n</tbody>\n</table>\n<h2>react-springのアニメーションプリミティブ一覧</h2>\n<p>react-springのHooksベースAPIの基本的なプリミティブには以下があります。</p>\n<ul>\n<li>\n<p><strong>(1) useSpring Hooks</strong></p>\n<ul>\n<li>1つのプロパティ設定のもとで、1つもしくは複数のアニメーション値キー(アニメーション的に変化する数値)を束ねるSpringオブジェクトを生成する。</li>\n</ul>\n</li>\n<li>\n<p><strong>(2) useSprings Hooks</strong></p>\n<ul>\n<li>それぞれ固有のプロパティ設定を持つ複数のSpringオブジェクトを生成する。</li>\n</ul>\n</li>\n<li>\n<p><strong>(3) useTrail Hooks</strong></p>\n<ul>\n<li>後続のものが先行するものに追随するような、複数のアニメーション値を定義する(Trail)。</li>\n</ul>\n</li>\n<li>\n<p><strong>(4) useTransition Hooks</strong></p>\n<ul>\n<li>表示コンポーネントを別のコンポーネントに「切り替える」ときのアニメーション効果(Transtiion)を定義する。</li>\n</ul>\n</li>\n<li>\n<p><strong>(5) useChain Hooks</strong></p>\n<ul>\n<li>Spring,Trails,Transitionなどによる効果を連鎖的に実行する。</li>\n</ul>\n</li>\n</ul>\n<p>これらが、react-springにおけるアニメーション表現のための基本的な枠組みになります。それぞれの詳細については後述します。</p>\n<h2>アニメーションのAPIの概観</h2>\n<p>APIの個別の説明に入るまえに、useSpringを例にとって、react-springにおけるHooks APIのおおまかなイメージをまず説明します。\nureSpringはreact-springのプリミティブの中でもっとも基本的なものです。\nuseSpringのAPIは以下のようなHook関数です。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// (A)</span>\n<span class=\"token function-variable function\">useSpring</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n              <span class=\"token operator\">...</span>アニメーション値のキー<span class=\"token operator\">:</span>目標値<span class=\"token punctuation\">,</span> \n              <span class=\"token operator\">...</span>アニメーションプリミティブのプロパティ設定<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> アニメーション値\n\n<span class=\"token comment\">// (B)</span>\n<span class=\"token function-variable function\">useSpring</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token operator\">...</span>アニメーション値のキー<span class=\"token operator\">:</span>目標値<span class=\"token punctuation\">,</span>\n              <span class=\"token operator\">...</span>アニメーションプリミティブのプロパティ設定<span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token punctuation\">[</span>アニメーション値<span class=\"token punctuation\">,</span> トリガ関数<span class=\"token punctuation\">]</span></code></pre></div>\n<p>つまり2つのオーバーロードされた関数があって、引数がオブジェクトか関数かによってそれぞれ</p>\n<ul>\n<li>(A) アニメーション値</li>\n<li>(B) アニメーション値とそのトリガ関数</li>\n</ul>\n<p>をそれぞれ返します。この二種類は、コントロールの方法が違います。\n以降、ここでいくつか出てきている用語を説明します。</p>\n<h3>【用語説明】アニメーション値(AnimatedValue)</h3>\n<p>react-springによるアニメーション処理における最も基本的で重要なプリミティブが特別な「アニメーション値」です。これは時間経過によって変化する値です。「キーとその値」というオブジェクトの形をしていて、useSpringなどのHook関数の返り値として得ることができます。\nアニメーション値は以下の特徴を持っています。</p>\n<ul>\n<li>アニメーション値の現在値は、後述の「アニメーション化されたコンポーネント」と、あと<a href=\"https://www.react-spring.io/docs/hooks/api#Interpolations\">interporateの計算</a>でのみ間接的に使用できる(文脈の外に取り出せない。取り出すと意味がない)。</li>\n<li>\n<p>useStateが提供するような状態値を保持する。違いとしては</p>\n<ul>\n<li>useStateが返却するセッター関数で可能であるような「前の値から次の値を設定」などはできない。</li>\n<li>現在値が設定で指定した物理特性と時刻経過によって、requestAnimationFrameのタイミングで自動的に再計算、設定される。その更新を意識する必要がない。</li>\n</ul>\n</li>\n<li>アニメーション値は文字列や配列であってもよい。変化を計算する以上、本質的には一つ一つのnumberに対応するが、その表現として\"18pt\"とか単位がついてもいいし、\"scale(3.0)\"や\"translate3d(0px,0,0)\"みたいに文字列に埋め込まれていてもいい。\"red\",\"green\"などの色名、rgb/hsvの指定、角度など、DOMの修飾に使用できる<a href=\"https://www.react-spring.io/docs/hooks/basics#up-front-interpolation\">多様な値を扱える</a>。</li>\n</ul>\n<h3>【用語説明】 アニメーションのトリガ</h3>\n<p>アニメーション値によるアニメーションをトリガし開始するには、主に3つの方法があります。</p>\n<ol>\n<li>(A)の引数の目標値を前回render呼び出し時から変化させる(propsやuseStateによって)。変化させると、その値に向かってアニメーションの変化が再度開始される。</li>\n<li>(B)の呼び出し結果に含まれる「トリガ関数」をイベントハンドラで呼び出し、新しい目標値を設定する。たとえば、<br/>\n<code class=\"language-text\">setAnimValue({key: value});</code><br/>\nのように、アニメーション値のキーと目標値を選択的に指定できる。</li>\n<li>(A),(B)いずれの場合でも可能な方法として、後述アニメーションプリミティブのfromプロパティを設定する。immidiate: falseでなければ、from値とto目標値に差があれば、マウントされた時点で目標値へのアニメーションのトリガがかかる。</li>\n</ol>\n<h3>【用語説明】アニメーション化されたコンポーネント(Animated Component)</h3>\n<p>「アニメーション値」の実体は、react-springライブラリが生成する、<strong>状態をもったオブジェクト</strong>なのですが、これをそのままコンポーネントのスタイル指定に与えることはできません。仮想DOMが理解する通常の数値や文字列に変換する必要があるのですが、アニメーション値の方を変換することはしません。その代りに、それを受け取って使用する側のコンポーネントの方をwrapperに変換します。何を言ってるかというと、たとえば、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>fontSize<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>fontSize<span class=\"token operator\">:</span> fontSize<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>こんなコンポーネントのstyle属性としてのfontSizeプロパティにアニメーション値を与えたいなら、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useString<span class=\"token punctuation\">,</span> animated <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-spring'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> aprops <span class=\"token operator\">=</span> <span class=\"token function\">useSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>fontSize<span class=\"token operator\">:</span> <span class=\"token string\">'150%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> AnimatedMyComponent <span class=\"token operator\">=</span> <span class=\"token function\">animated</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ★</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token operator\">&lt;</span>AnimatedMyComponent style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>fontSize<span class=\"token operator\">:</span> aprops<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> もしくは <span class=\"token operator\">&lt;</span>AnimatedMyComponent style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aprops<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n <span class=\"token operator\">--</span><span class=\"token operator\">></span></code></pre></div>\n<p>上記の★のところで、関数animatedにコンポーネントを渡して変換をかけます。ここで得られる「AnimatedMyComponent」は、プロパティにアニメーション値が来たときに、明示的にrequestAnimationFrameを呼んだりしなくても、そのアニメーション値に従ったアニメーション表示を自律的に行うコンポーネントになります。これを本文書では「アニメーション化されたコンポーネント」と呼びます<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>。</p>\n<p>div,span,imgなどについては、あらかじめアニメーション化されたコンポーネントが用意されています。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">コンポーネント</th>\n<th align=\"left\">意味</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">animated.div</td>\n<td align=\"left\">アニメーション化されたdivコンポーネント</td>\n</tr>\n<tr>\n<td align=\"left\">animated.span</td>\n<td align=\"left\">アニメーション化されたspanコンポーネント</td>\n</tr>\n<tr>\n<td align=\"left\">animated.img</td>\n<td align=\"left\">アニメーション化されたimgコンポーネント</td>\n</tr>\n<tr>\n<td align=\"left\">animated.svg</td>\n<td align=\"left\">アニメーション化されたsvgコンポーネント</td>\n</tr>\n<tr>\n<td align=\"left\">animated.h1,h2..</td>\n<td align=\"left\">アニメーション化されたh1,h2,..コンポーネント</td>\n</tr>\n</tbody>\n</table>\n<h3>【用語説明】<a href=\"https://www.react-spring.io/docs/hooks/api#properties\">アニメーションプリミティブのプロパティ設定</a></h3>\n<p>Hooksに与える共通する設定用オブジェクトです。例として、useSpringの第一引数にあたえる場合以下のようになります</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">= useSpring({ここにキー:バリューで指定}) // 前述の(A)</code></pre></div>\n<p>あるいは</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">= useSpring(() =&gt; {ここにキー:バリューで指定}) // 前述の(B)</code></pre></div>\n<p>主なキーには以下があります。他すべてについては<a href=\"https://www.react-spring.io/docs/hooks/api#properties\">こちら</a>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">プロパティ名</th>\n<th align=\"left\">型</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">任意</td>\n<td align=\"left\">num/string</td>\n<td align=\"left\">キーがアニメーションプロパティ設定のキーに被らなければ、toで指定する目標値として扱われる。</td>\n</tr>\n<tr>\n<td align=\"left\">from</td>\n<td align=\"left\">obj</td>\n<td align=\"left\">アニメーション値の初期値。オプション。トリガされる前に使用される値。</td>\n</tr>\n<tr>\n<td align=\"left\">to</td>\n<td align=\"left\">obj/fn/array(obj)</td>\n<td align=\"left\">アニメーション値が収束する目標値。</td>\n</tr>\n<tr>\n<td align=\"left\">delay</td>\n<td align=\"left\">number/fn</td>\n<td align=\"left\">開始時の遅延(ms)。オプション。引数にkeyをとる関数を与えると、複数のアニメーション値を設定することができる(fnについては以下同様)。</td>\n</tr>\n<tr>\n<td align=\"left\">config</td>\n<td align=\"left\">obj/fn</td>\n<td align=\"left\">慣性、摩擦力、張力などの物性を指定。既定義の<a href=\"https://www.react-spring.io/docs/hooks/api#Presets\">プリセット物性</a>もある(config.{default,gentle,wobbly,stiff,slow,molasses})。オプション。</td>\n</tr>\n<tr>\n<td align=\"left\">ref</td>\n<td align=\"left\">Reactのref</td>\n<td align=\"left\">後述のuseChainで連鎖的に実行するアニメーションの一環として動作させる。オプション。</td>\n</tr>\n</tbody>\n</table>\n<h1>API説明</h1>\n<h2>(1) <a href=\"https://www.react-spring.io/docs/hooks/use-spring\">useSpring Hook</a></h2>\n<p>ureSpringはreact-springのプリミティブの中でもっとも基本的なものです。\n1つのプロパティ設定のもとで、1つもしくは複数のアニメーション値キー(アニメーション的に変化する数値)を束ねるSpringオブジェクトを生成します。</p>\n<h3>useSpring によるアニメーションの例(SampleA, SampleB)</h3>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/040fa6a5-ce1b-508a-4188-cbe338b1c1ef.gif\" alt=\"spring.gif\">\n(以降含め、デモは<a href=\"https://codesandbox.io/s/lively-cookies-6nc3u\">こちらで</a>試せます。ソースコードは<a href=\"https://github.com/uehaj/ReactSpringSamples/\">こちら</a>です。)</p>\n<p>上記は、1行目がSampleSpringAというコンポーネント、2行目がSampleSpringBというコンポーネントで実装しています。見た目も動作も同じですが、処理がことなります。\nSampleSpringAは、前述「<a href=\"https://qiita.com/drafts/260f188851045cc091ac/edit#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AEapi%E3%81%AE%E6%A6%82%E8%A6%B3\">アニメーションのAPIの概観</a>」における(A)のパターンでuseSpringにアニメーションプリミティブのプロパティを与え、Springを得ています。\nSampleSpringBは、同様に(B)のパターンでseSpringにアニメーションプリミティブのプロパティを返す関数を与え、Springとトリガ関数を得ています。</p>\n<h3>useSpringコード例(SampleSpringA.tsx)</h3>\n<p>以下SampleSpringAのソースコードです。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript:samplespringa.tsx\"><pre class=\"language-typescript:samplespringa.tsx\"><code class=\"language-typescript:samplespringa.tsx\">import React, { useState } from &quot;react&quot;;\nimport { useSpring, animated } from &quot;react-spring&quot;;\n\nconst SampleSpringA = () =&gt; {\n  // (A)\n  const [enter, setEnter] = useState(false);\n  const spring = useSpring({\n    fontSize: enter ? &quot;48pt&quot; : &quot;24pt&quot;,\n    color: enter ? &quot;red&quot; : &quot;green&quot;\n  });\n  return (\n    &lt;animated.div\n      style={spring}\n      onMouseEnter={e =&gt; setEnter(true)}\n      onMouseLeave={e =&gt; setEnter(false)}\n    &gt;\n      Hello React Spring\n    &lt;/animated.div&gt;\n  );\n};\n\nexport default SampleSpringA;</code></pre></div>\n<p>enterというstateを間接的にSpringに参照させ、そのstateを変化させることで、目標値が変化します。すなわち、stateの更新と引き続くrenderの呼び出しのタイミングで、アニメーションのトリガがかかり、アニメーションが進行します。</p>\n<h3>useSpringコード例(SampleSpringB.tsx)</h3>\n<p>以下はSampleSpringBのソースコードです。</p>\n<p>こちらではstateを介在させる必要がなく、useSsringに関数をわたすことで、トリガ関数が返ってくるので、トリガ関数を任意のイベントハンドラ等から呼び出すことでアニメーションの進行がはじまります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript:samplespringb.tsx\"><pre class=\"language-typescript:samplespringb.tsx\"><code class=\"language-typescript:samplespringb.tsx\">import React from &quot;react&quot;;\nimport { useSpring, animated } from &quot;react-spring&quot;;\n\nconst SampleSpringB = () =&gt; {\n  // (B)\n  const [spring, set] = useSpring(() =&gt; ({\n    fontSize: &quot;24pt&quot;,\n    color: &quot;green&quot;\n  }));\n  return (\n    &lt;animated.div\n      style={spring}\n      onMouseEnter={e =&gt; set({ fontSize: &quot;48pt&quot;, color: &quot;red&quot; })}\n      onMouseLeave={e =&gt; set({ fontSize: &quot;24pt&quot;, color: &quot;green&quot; })}\n    &gt;\n      Hello React Spring\n    &lt;/animated.div&gt;\n  );\n};\n\nexport default SampleSpringB;</code></pre></div>\n<h2>(2) <a href=\"https://www.react-spring.io/docs/hooks/use-springs\">useSprings Hook</a></h2>\n<p>それぞれ固有のプロパティ設定を持つ複数のSpringオブジェクト(ここではSpring列と呼ぶ)を生成します。\n似たようなアニメーションを行う一連のアニメーション化されたコンポーネントを生成することができます。</p>\n<h3>useSpringsによるアニメーションの例</h3>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/e9ab5ed6-d800-c7f9-acd3-31c2afc2666e.gif\" alt=\"springs.gif\"></p>\n<h3>useSpringsコード例(SampleSprings.tsx)</h3>\n<p>Spring列のインデックスを引数とするコールバック関数で、個々のSpringで異なる設定をします。\nトリガ関数もSpring列のインデックスを引数とする関数で指定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript:samplesprings.tsx\"><pre class=\"language-typescript:samplesprings.tsx\"><code class=\"language-typescript:samplesprings.tsx\">import React, { useState } from &quot;react&quot;;\nimport { useSprings, animated, config } from &quot;react-spring&quot;;\n\nconst SampleSprings = () =&gt; {\n  const msg = &quot;Hello React Spring&quot;;\n  const [springs, set] = useSprings(msg.length, (idx) =&gt; ({\n    // idxによって異なる設定をしてもよい。\n    config: config.wobbly,\n    fontSize: &quot;24pt&quot;\n  }));\n  return (\n    &lt;div style={{ fontSize: &quot;24pt&quot; }}&gt;\n      {springs.map((item, idx) =&gt; (\n        &lt;animated.span\n          onMouseEnter={e =&gt; set(i =&gt; (i === idx ? { fontSize: &quot;48pt&quot; } : {}))}\n          onMouseLeave={e =&gt; set(i =&gt; (i === idx ? { fontSize: &quot;24pt&quot; } : {}))}\n          style={{ verticalAlign: &quot;top&quot;, ...item }}\n        &gt;\n          {msg[idx]}\n        &lt;/animated.span&gt;\n      ))}\n    &lt;/div&gt;\n  );\n};\n\nexport default SampleSprings;</code></pre></div>\n<h2>(3) <a href=\"https://www.react-spring.io/docs/hooks/use-trail\">useTrail Hook</a></h2>\n<p>後続のものが先行するものの変化に追随するような、複数のアニメーション値のリストを定義する(Trail)。\nマウストラッキングアニメーションのようなものが簡単に定義できます。</p>\n<h3>useTrailによるアニメーションの例</h3>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/c9d55e89-2034-97a6-21dd-c4308734cab4.gif\" alt=\"trail.gif\"></p>\n<h3>useTrailコード例(SampleTrail.tsx)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript:sampletrail.tsx\"><pre class=\"language-typescript:sampletrail.tsx\"><code class=\"language-typescript:sampletrail.tsx\">import React, { useState } from &quot;react&quot;;\nimport { useTrail, animated, config } from &quot;react-spring&quot;;\n\nconst SampleTrail = () =&gt; {\n  const msg = &quot;Hello React Spring&quot;;\n  const [{ x, y }, setXY] = useState({ x: 0, y: 0 });\n  const trails = useTrail(msg.length, {\n    config: config.gentle,\n    left: `${x}px`,\n    top: `${y}px`,\n    position: &quot;absolute&quot;\n  });\n  return (\n    &lt;div\n      style={{ width: &quot;100%&quot;, height: 1000, fontSize: &quot;24pt&quot; }}\n      onMouseMove={e =&gt; {\n        e.persist();\n        setXY({ x: e.clientX, y: e.clientY });\n      }}\n    &gt;\n      {trails.map((trail, idx) =&gt; (\n        &lt;animated.span style={{ ...trail, paddingLeft: idx * 23 }}&gt;\n          {msg[idx]}\n        &lt;/animated.span&gt;\n      ))}\n    &lt;/div&gt;\n  );\n};\n\nexport default SampleTrail;</code></pre></div>\n<h2>(4) <a href=\"https://www.react-spring.io/docs/hooks/use-transition\">useTransition Hook</a></h2>\n<p>表示コンポーネントを別のコンポーネントに「切り替える」ときのアニメーション効果を定義する。\n以下のようなマウント・アンマウントおよびアニメーションの処理を一手に手際良くやることができます。</p>\n<ul>\n<li>これから表示しようとするコンポーネントをDOMに新たにマウントとする処理</li>\n<li>新しくマウントしたコンポーネントに対するアニメーションの実行</li>\n<li>新しくマウントしたコンポーネントによって、置き換えられてしまうコンポーネントをDOMからアンマウントする処理</li>\n<li>置き換えられてしまうコンポーネントのアンマウント時のアニメーションの実行</li>\n</ul>\n<p>一般に、コンポーネントを「切り替える」操作として、「古い方のアンマウントと、新しい方のマウント」を同時に行うのが自然なのですが、アニメーションとしては、アンマウントされる方が消えていくアニメーションと新しい方が表われてくるアニメーションは、時間的重なりをもって動かないとそれらしくありません。なので、useTransionの返り値はアニメーション進行中のコンポーネントを表わす配列であり、これに基づいて消えていくコンポーネントを並行してアニメーションさせつつ、時間差をもってアンマウントできます。</p>\n<h3>useTransitionによるアニメーションの例</h3>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/8a144326-7fb8-b8b9-07f7-a332add19764.gif\" alt=\"transition.gif\"></p>\n<h3>useTransitionコード例(SampleTransition.tsx)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript:sampletransion.tsx\"><pre class=\"language-typescript:sampletransion.tsx\"><code class=\"language-typescript:sampletransion.tsx\">import React, { useState } from &quot;react&quot;;\nimport { useTransition, animated, config } from &quot;react-spring&quot;;\n\nconst SampleTransition = () =&gt; {\n  const [idx, setIdx] = useState(0);\n\n  const comps = [\n    ({ style }) =&gt; (\n      &lt;animated.div\n        style={{ position: &quot;absolute&quot;, backgroundColor: &quot;lightblue&quot;, ...style }}\n      &gt;\n        Hello React Spring 1\n      &lt;/animated.div&gt;\n    ),\n    ({ style }) =&gt; (\n      &lt;animated.div\n        style={{\n          position: &quot;absolute&quot;,\n          backgroundColor: &quot;lightgreen&quot;,\n          ...style\n        }}\n      &gt;\n        Hello React Spring 2\n      &lt;/animated.div&gt;\n    ),\n    ({ style }) =&gt; (\n      &lt;animated.div\n        style={{ position: &quot;absolute&quot;, backgroundColor: &quot;pink&quot;, ...style }}\n      &gt;\n        Hello React Spring 3\n      &lt;/animated.div&gt;\n    )\n  ];\n\n  const transitions = useTransition(idx, item =&gt; item, { // ★\n    unique: true,\n    from: { opacity: 0 },\n    enter: {\n      opacity: 1,\n      transform: &quot;translateY(0px) rotate(0turn)&quot;\n    },\n    leave: {\n      opacity: 0,\n      transform: &quot;translateY(100px) rotate(0.3turn)&quot;\n    }\n  });\n\n  return (\n    &lt;div\n      style={{ width: &quot;100%&quot;, height: 1000, fontSize: &quot;24pt&quot; }}\n      onClick={e =&gt; {\n        e.persist();\n        setIdx(x =&gt; (x + 1) % comps.length);\n      }}\n    &gt;\n      {transitions.map(({ item, props, key }) =&gt; { // ★★\n        const Comp = comps[item];\n        return &lt;Comp key={key} style={props} /&gt;;\n      })}\n    &lt;/div&gt;\n  );\n};\n\nexport default SampleTransition;</code></pre></div>\n<p>上記で、compsは切り替えをおこなう候補としてのコンポーネントの一覧です。\n★で、切り替える現在のインデックスをuseTrainsionの第一引数に与えていきます。</p>\n<p>useTraisitionの返り値は、このインデックス値に加えて、前回のトランジションアニメーションが終了していないもののインデックス値がかえってきます。これらはアンマウントしてはいけません。\n一般には、useTraisitionが返す、「インデックス値をキーに含む配列要素」すべてに対して、インデックス値対応するコンポーネントをmapで無条件にマウントしてやればよいわけです(★★)。</p>\n<h2>(5) <a href=\"https://www.react-spring.io/docs/hooks/use-chain\">useChain Hook</a></h2>\n<p>Spring,Trails,Transisionなどによる効果を連鎖的に実行する。</p>\n<ul>\n<li>\n<p>Springなどのアニメーション値を作成する際のアニメーションプリミティブのrefプロパティを指定し、useRefの結果を組込むすることで、useChainがrefを使ってトリガ関数の役割りを果してくれるようになります。逆に言えば、ref属性を組込むとトリガ関数経由ではコントロールできなくなります。</p>\n<ul>\n<li>このせいか、useSpringの(B)「アニメーション値とそのトリガ関数」のパターンのものに対してはuseChainは機能しません。</li>\n</ul>\n</li>\n</ul>\n<h3>useChainによるアニメーションの例</h3>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/9979/4558dd53-12af-3b37-ed10-13f06d5bca51.gif\" alt=\"chain.gif\"></p>\n<h3>useChainコード例(SampleChain.tsx)</h3>\n<p>refを準備し、制御下におく部品に組み込み、chainで繋げます</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript:samplechain.tsx\"><pre class=\"language-typescript:samplechain.tsx\"><code class=\"language-typescript:samplechain.tsx\">import React, { useState, useRef } from &quot;react&quot;;\nimport { useSpring, useChain, animated, config } from &quot;react-spring&quot;;\n\nconst SampleSpring = ({ ref }) =&gt; {\n  const [enter, setEnter] = useState(false);\n  const ref1 = useRef();\n  const ref2 = useRef();\n\n  const spring1 = useSpring({\n    fontSize: enter ? &quot;48pt&quot; : &quot;18pt&quot;,\n    ref: ref1\n  });\n  const spring2 = useSpring({\n    fontSize: enter ? &quot;48pt&quot; : &quot;18pt&quot;,\n    ref: ref2\n  });\n  useChain([ref1, ref2]);\n  return (\n    &lt;div\n      style={{ textAlign: &quot;center&quot; }}\n      onMouseEnter={e =&gt; setEnter(p =&gt; !p)}\n      onMouseLeave={e =&gt; setEnter(p =&gt; !p)}\n    &gt;\n      &lt;animated.div style={spring1}&gt;Hello React Spring&lt;/animated.div&gt;\n      &lt;animated.div style={spring2}&gt;Hello React Spring&lt;/animated.div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default SampleSpring;</code></pre></div>\n<h1>これはFRP(Functional Reactive Programming)か?</h1>\n<p>I think so.</p>\n<h1>おわりに</h1>\n<p>ということで、react-springによる最先端Webアニメーション技術のサワリを紹介しました。\n今回、紹介したのは、react-springの機能の一部ですが、主要なところはカバーしたつもりです。\n本書のデモでは主に、fontSizeという地味な属性を変化させましたが、transform: scale, rotateなどのプロパティを変化させたり、SVGを使用すると複雑で派手なアニメーションを行うことができ、基本は同じです。\n公式サイトには他に多数のデモが掲載されていますので参考ください。</p>\n<ul>\n<li><a href=\"https://www.react-spring.io/docs/hooks/examples\">https://www.react-spring.io/docs/hooks/examples</a></li>\n</ul>\n<p>もうアニメーションも怖くない! かも!</p>\n<h1>参考リンク</h1>\n<p>本文書のサンプルコードは<a href=\"https://github.com/uehaj/ReactSpringSamples/\">こちら</a>もしくは<a href=\"https://codesandbox.io/s/lively-cookies-6nc3u\">こちら</a>にあります。</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-3\">\n<p>「<a href=\"https://note.com/ritar/n/n5e8ed0e07917\">世界一わかりやすい「イージング」と、その応用</a>」などが参考になります:  </p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>HoCやRender PropsベースのAPIもあります。<br/></p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-1\">\n<p>一般的な呼称ではないかもしれない。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"January 01, 1970","path":"/260f188851045cc091ac","title":"React-SpringのHooks APIでブラウザアニメーションを基本から極めよう!","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}