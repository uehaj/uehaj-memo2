{"componentChunkName":"component---src-templates-blog-template-js","path":"/53460a9772f2bfbaa3c1","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p><a href=\"http://qiita.com/Nabetani/items/9810b301648099028bf0\">第19回 オフラインリアルタイムどう書くの問題「不良セクタの隣」</a>を、Haskellで解きました。</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell:sectors.hs\"><pre class=\"language-haskell:sectors.hs\"><code class=\"language-haskell:sectors.hs\">import Data.Ratio\nimport Data.List\n\nhasIntersect :: (Ratio Int, Ratio Int, Int) -&gt; (Ratio Int, Ratio Int, Int) -&gt; Bool\nhasIntersect (fst_a,snd_a,_) (fst_b,snd_b,_) = (fst_a&lt;=snd_b &amp;&amp; fst_b &lt;=snd_a) || (fst_b &lt;=snd_a &amp;&amp; snd_a&lt;=snd_b)\n\nranges n = take (8*n+2) $ [(low,up,n*100+(m `mod` (8*n))) | m&lt;-[-1..], let w=(1%(8*n)), let low=(-w/2+(w*(m%1))), let up=low+w]\n\ninRange n m = filter $ hasIntersect (ranges n !! (m+1))\n\nneighbor&#39; n m = (ranges n !! (m+1-1)) : (ranges n !! (m+1+1)) : neighbor&#39;&#39; n m\n where\n   neighbor&#39;&#39; n m\n     | n &lt;= 1 = nub $ (inRange n m (ranges $ n+1))\n     | n == 4 = nub $ (inRange n m (ranges $ n-1))\n     | otherwise = nub ((inRange n m (ranges $ n-1)) ++\n                        (inRange n m (ranges $ n+1)))\n\nneighbor n = neighbor&#39; (n `div` 100) (n `mod` 100)\n\nreserved xs = map (!!0) $ filter (\\ x -&gt; length x &gt; 1) $ group $ sort $ filter (\\x-&gt;not (x `elem` xs)) $ map (\\(_,_,n)-&gt;n) $ concatMap neighbor xs\n\ntest :: [Int] -&gt; [Int] -&gt; IO()\ntest s1 s2 = do\n   putStrLn $ show $ reserved s1 == s2\n\nmain = do\n   test [400,401,302] [300,301,402] {- 0 -}\n   test [105,100,306,414] [] {- 1 -}\n   test [100] [] {- 2 -}\n   test [211] [] {- 3 -}\n   test [317] [] {- 4 -}\n   test [414] [] {- 5 -}\n   test [100,106] [107] {- 6 -}\n   test [205,203] [102,204] {- 7 -}\n   test [303,305] [304] {- 8 -}\n   test [407,409] [306,408] {- 9  -}\n   test [104,103] [207] {- 10  -}\n   test [204,203] [102,305]     {- 11  -}\n   test [313,314] [209,418]     {- 12  -}\n   test [419,418] [314]     {- 13  -}\n   test [100,102,101] [201,203]     {- 14  -}\n   test [103,206,309] [205,207,308,310]     {- 15  -}\n   test [414,310,309] [206,311,413]     {- 16  -}\n   test [104,102,206,307,102,202] [101,103,203,204,205,207,308]     {- 17  -}\n   test [104,206,308,409,407] [103,205,207,306,307,309,408,410]     {- 18  -}\n   test [313,406,213,301,409,422,412,102,428] []     {- 19  -}\n   test [101,300,210,308,423,321,403,408,415] []     {- 20  -}\n   test [304,316,307,207,427,402,107,431,412,418,424] []     {- 21  -}\n   test [205,408,210,215,425,302,311,400,428,412] []     {- 22  -}\n   test [200,311,306,412,403,318,427,105,420] []     {- 23  -}\n   test [105,305,407,408,309,208,427] [104,209,306,406]     {- 24  -}\n   test [311,304,322,404,429,305,316] [203,303,321,405,406,430]     {- 25  -}\n   test [210,401,316,425,101] [211,315]     {- 26  -}\n   test [414,403,404,416,428,421] [303,415]     {- 27  -}\n   test [207,300,103,211,428] [104,206]     {- 28  -}\n   test [322,314,310] []     {- 29  -}\n   test [427,200,215] [100,323]     {- 30  -}\n   test [311,402,424,307,318,430,323,305,201] [200,204,301,302,306,322,423,425,431]     {- 31  -}\n   test [425,430,408] []     {- 32  -}\n   test [202,320,209,426] [319,427]     {- 33  -}\n   test [430,209,302,310,304,431,320] [202,303,323]     {- 34  -}\n   test [208,206,406,424,213,312] [207,311,313]     {- 35  -}\n   test [420,302,313,413,317,402] [301,403]     {- 36  -}\n   test [319,306,309,418,204,411] [305,307,308,412]     {- 37  -}\n   test [400,308,105,430,203,428,209] [104,210,429,431]     {- 38  -}\n   test [200,305,214] [215]     {- 39  -}\n   test [214,408,410,407,317,422] [306,316,409,423] {- 40  -}</code></pre></div>","frontmatter":{"date":"January 01, 1970","path":"/53460a9772f2bfbaa3c1","title":"第19回 オフラインリアルタイムどう書くの問題「不良セクタの隣」を、Haskellで解く","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}