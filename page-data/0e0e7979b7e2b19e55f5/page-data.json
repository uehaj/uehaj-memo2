{"componentChunkName":"component---src-templates-blog-template-js","path":"/0e0e7979b7e2b19e55f5","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p><a href=\"http://qiita.com/Nabetani/items/1de39df381dfeee305ab\">第12回 オフラインリアルタイムどう書くの参考問題「道なりの亀」</a>を、JVM上で動作するHaskellライクな言語<a href=\"https://github.com/Frege/frege/wiki/_pages\">Frege</a>(フレーゲ)で解きました。</p>\n<div class=\"gatsby-highlight\" data-language=\"frege:turtle.fr\"><pre class=\"language-frege:turtle.fr\"><code class=\"language-frege:turtle.fr\">package sample.Turtle where\n\ntype Position = Char\ntype Direction = Char\ntype Command = Char\n\npure native elemIndex indexOf :: String -&gt; Int -&gt; Int\n\newData :: String\newData = &quot;?&quot;++packed [&#39;A&#39;..&#39;K&#39;]++&quot;?&quot;++packed [&#39;L&#39;..&#39;V&#39;]++&quot;?&quot;++packed [&#39;W&#39;..&#39;Z&#39;]++packed [&#39;a&#39;..&#39;g&#39;]++&quot;?&quot;\n         ++&quot;?hij?klm?nop?qrs?tuv?wxy?z01?234?567?&quot;\n\nnsData :: String\nnsData = &quot;?&quot;++&quot;ALWhknqtwz25&quot;++&quot;?&quot;++&quot;BMXilorux036&quot;++&quot;?&quot;++&quot;CNYjmpsvy147&quot;\n         ++ &quot;?&quot; ++&quot;DOZ&quot; ++ &quot;?&quot; ++ &quot;EPa&quot; ++ &quot;?&quot; ++ &quot;FQb&quot; ++ &quot;?&quot; ++ &quot;GRc&quot; ++ &quot;?&quot; ++ &quot;HSd&quot;\n         ++ &quot;?&quot; ++ &quot;ITe&quot; ++ &quot;?&quot; ++ &quot;JUf&quot; ++ &quot;?&quot; ++ &quot;KVg&quot; ++ &quot;?&quot;\n\nmoveForward :: (Position, Direction, [Char]) -&gt; Int -&gt; (Position, Direction, [Char])\nmoveForward (pos, dir, hist) 0 = (pos, dir, hist)\nmoveForward (&#39;7&#39;, &#39;S&#39;, hist) n = moveForward (&#39;e&#39;, &#39;N&#39;, hist++[&#39;e&#39;]) (n-1)\nmoveForward (&#39;6&#39;, &#39;S&#39;, hist) n = moveForward (&#39;f&#39;, &#39;N&#39;, hist++[&#39;f&#39;]) (n-1)\nmoveForward (&#39;5&#39;, &#39;S&#39;, hist) n = moveForward (&#39;g&#39;, &#39;N&#39;, hist++[&#39;g&#39;]) (n-1)\nmoveForward (&#39;e&#39;, &#39;S&#39;, hist) n = moveForward (&#39;7&#39;, &#39;N&#39;, hist++[&#39;7&#39;]) (n-1)\nmoveForward (&#39;f&#39;, &#39;S&#39;, hist) n = moveForward (&#39;6&#39;, &#39;N&#39;, hist++[&#39;6&#39;]) (n-1)\nmoveForward (&#39;g&#39;, &#39;S&#39;, hist) n = moveForward (&#39;5&#39;, &#39;N&#39;, hist++[&#39;5&#39;]) (n-1)\nmoveForward (pos, dir, hist) n = moveForward nextState (n-1)\n    where\n          nextState :: (Char, Char, [Char])\n          nextState = (nextPos, dir, hist++(nextPos:[]))\n          nextPos :: Char\n          nextPos = case dir of\n                      &#39;N&#39; -&gt; nextPosOf pos nsData (subtract 1)\n                      &#39;W&#39; -&gt; nextPosOf pos ewData (subtract 1)\n                      &#39;S&#39; -&gt; nextPosOf pos nsData (+1)\n                      &#39;E&#39; -&gt; nextPosOf pos ewData (+1)\n          nextPosOf :: Char -&gt; String -&gt; (Int -&gt; Int) -&gt; Char\n          nextPosOf c map f = let i=map `elemIndex` (ord c) in if (i/=0) then ((unpacked map) !! (f i)) else &#39;?&#39;\n\nturnDir :: Direction -&gt; String -&gt; Position -&gt; [Char] -&gt; State (Position, Direction, [Char]) ()\nturnDir dir dirs pos hist = State.put (pos, (let x=(dirs `elemIndex` (ord dir)) in ((unpacked dirs) !! (x+1))), hist)\n\noneStep :: Command -&gt; State (Position, Direction, [Char]) ()\noneStep ch = do\n  (pos, dir, hist) &lt;- State.get\n  case ch of\n    &#39;L&#39; -&gt; turnDir dir &quot;ENWSE&quot; pos hist\n    &#39;R&#39; -&gt; turnDir dir &quot;ESWNE&quot; pos hist\n    _\n          | ch `elem` [&#39;1&#39;..&#39;9&#39;] -&gt; State.put (moveForward (pos, dir, hist) (ord ch-ord &#39;0&#39;))\n          | ch `elem` [&#39;a&#39;..&#39;f&#39;] -&gt; State.put (moveForward (pos, dir, hist) ((ord ch-ord &#39;a&#39;)+10))\n\nsolve :: [Command] -&gt; [Position]\nsolve cmd = reduce hist\n        where (_,_,hist) = (let (v,s) = State.run (mapM_ oneStep cmd) initialState in s)\n              reduce [] = []\n              reduce (xs:&#39;?&#39;:_) = xs:(unpacked &quot;?&quot;)\n              reduce (x:xs) = x:(reduce xs)\n              initialState = (&#39;A&#39;,&#39;E&#39;,(unpacked &quot;A&quot;))\n\ntest cmd expected = do\n    let result = packed $ solve (unpacked cmd)\n    println $ result == expected\n\nmain args = do\n    test &quot;2RcL3LL22&quot; &quot;ABCNYjmpsvy147edcbcdef&quot;  {- 0 -}\n    test &quot;L3R4L5RR5R3L5&quot; &quot;A?&quot;  {- 1 -}\n    test &quot;2ReLLe&quot; &quot;ABCNYjmpsvy147eTITe741yvspmjYNC&quot;  {- 2 -}\n    test &quot;1ReRRe&quot; &quot;ABMXilorux036fUJUf630xuroliXMB&quot;  {- 3 -}\n    test &quot;ReRRe&quot; &quot;ALWhknqtwz25gVKVg52zwtqnkhWLA&quot;  {- 4 -}\n    test &quot;f&quot; &quot;ABCDEFGHIJK?&quot;  {- 5 -}\n    test &quot;Rf&quot; &quot;ALWhknqtwz25gVK?&quot;  {- 6 -}\n    test &quot;1Rf&quot; &quot;ABMXilorux036fUJ?&quot;  {- 7 -}\n    test &quot;2Rf&quot; &quot;ABCNYjmpsvy147eTI?&quot;  {- 8 -}\n    test &quot;aR1RaL1LaR1R2L1L2&quot; &quot;ABCDEFGHIJKVUTSRQPONMLWXYZabcdefg567432&quot;  {- 9 -}\n    test &quot;2R1R2L1L2R1R2L1L2R1R2L1L2R1R2L1L2&quot; &quot;ABCNMLWXYjihklmponqrsvutwxy&quot;  {- 10 -}\n    test &quot;2R4R2L4L2R4R2L4L2R4R2L4L2&quot; &quot;ABCNYjmlknqtwxy147efgVK?&quot;  {- 11 -}\n    test &quot;R1L2R4R2L4L2R4R2L4L2R4R2L4L2&quot; &quot;ALMNYjmponqtwz0147eTUVK?&quot;  {- 12 -}\n    test &quot;R2L2R4R2L4L2R4R2L4L2R4R2L4L2&quot; &quot;ALWXYjmpsrqtwz2347eTIJK?&quot;  {- 13 -}\n    test &quot;R3L2R4R2L4L2R4R2L4L2R4R2L4L2&quot; &quot;ALWhijmpsvutwz2567eTI?&quot;  {- 14 -}\n    test &quot;R5L2L5L1LaR1L4L5&quot; &quot;ALWhknopmjYNCBMXilorux0325gVKJIHGF&quot;  {- 15 -}\n    test &quot;1R2L4L2R4R2L4L2R4&quot; &quot;ABMXYZabQFGHIJUfg?&quot;  {- 16 -}\n    test &quot;2R2L4L2R4R2L4L2R4&quot; &quot;ABCNYZabcRGHIJKVg?&quot;  {- 17 -}\n    test &quot;3R2L4L2R4R2L4L2R4&quot; &quot;ABCDOZabcdSHIJK?&quot;  {- 18 -}\n    test &quot;4R2L4L2R4R2L4L2R4&quot; &quot;ABCDEPabcdeTIJK?&quot;  {- 19 -}\n    test &quot;5R2L4L2R4R2L4L2R4&quot; &quot;ABCDEFQbcdefUJK?&quot;  {- 20 -}\n    test &quot;LLL1RRR1LLL1RRR2R1&quot; &quot;ALMXYZ?&quot;  {- 21 -}\n    test &quot;R3RRR3&quot; &quot;ALWhij?&quot;  {- 22 -}\n    test &quot;1LLL4RRR1LR1RL1&quot; &quot;ABMXilm?&quot;  {- 23 -}\n    test &quot;R2L1R2L1R3R4&quot; &quot;ALWXilmpsvut?&quot;  {- 24 -}\n    test &quot;7R4f47LLLc6R9L&quot; &quot;ABCDEFGHSd?&quot;  {- 25 -}\n    test &quot;5RR868L8448LL4R6&quot; &quot;ABCDEFEDCBA?&quot;  {- 26 -}\n    test &quot;42Rd1RLLa7L5&quot; &quot;ABCDEFGRc?&quot;  {- 27 -}\n    test &quot;RRLL6RLR1L5d12LaLRRL529L&quot; &quot;ABCDEFGRSTUV?&quot;  {- 28 -}\n    test &quot;RLR7L6LL1LRRRcRL52R&quot; &quot;ALWhknqtuv?&quot;  {- 29 -}\n    test &quot;1RLR8RLR1R437L99636R&quot; &quot;ABMXiloruxwtqnkhWLA?&quot;  {- 30 -}\n    test &quot;LLL2L3La9Le5LRR&quot; &quot;ALWXYZOD?&quot;  {- 31 -}\n    test &quot;R1LcRR491&quot; &quot;ALMNOPQRSTUV?&quot;  {- 32 -}\n    test &quot;R8L1R1R512L8RLLReRf&quot; &quot;ALWhknqtwx0z?&quot;  {- 33 -}\n    test &quot;1RcL8f1L29a5&quot; &quot;ABMXilorux036fedcbaZYXW?&quot;  {- 34 -}\n    test &quot;R822LeL46LL39LL&quot; &quot;ALWhknqtwz25gfedcbaZYXW?&quot;  {- 35 -}\n    test &quot;9R3L5LRRLb5R3L7cLLLR4L&quot; &quot;ABCDEFGHIJUf65?&quot;  {- 36 -}\n    test &quot;7LLRRR2R3R69Lf76eR2L&quot; &quot;ABCDEFGHSdcbaPE?&quot;  {- 37 -}\n    test &quot;8RRRLL3Le&quot; &quot;ABCDEFGHITe765?&quot;  {- 38 -}\n    test &quot;8R5RLL6LbL4LL5bL&quot; &quot;ABCDEFGHITe7410z?&quot;  {- 39 -}\n    test &quot;6LR2R1LR5LRLRL484L63&quot; &quot;ABCDEFGHITe741yxw?&quot;         {- 40 -}\n\n  </code></pre></div>","frontmatter":{"date":"January 01, 1970","path":"/0e0e7979b7e2b19e55f5","title":"第12回オフラインリアルタイムどう書くの参考問題をFregeで解く","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}