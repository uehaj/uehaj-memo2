{"componentChunkName":"component---src-templates-blog-template-js","path":"/bee9b9dd8279b1a769bb","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p>この記事は、@inuscriptさんによる「<a href=\"http://qiita.com/inuscript/items/c672ddad4c24936b1061\">redux-observableで検索機能の実装を写経してRxJSのパワーを感じる</a>」を<a href=\"https://github.com/redux-saga/redux-saga\">Redux-Saga</a>で書きなおしたものです。</p>\n<h1>本記事の目的</h1>\n<p>実用コードにおける非同期処理では以下のような問題が頻出する。これらについて元記事におけるRedux-obserbable(あるいはAngularが提供する)RxJSを用いた解決方法に対して、Redux-sagaによる解決方法を比較する。</p>\n<p>(<a href=\"http://qiita.com/inuscript/items/c672ddad4c24936b1061\">元記事</a>よりの引用)</p>\n<pre>\nこの時、大きく以下３つの問題に当たる\n\n1: キーストローク毎にリクエストするのはよろしくない\n2: 同じリクエストで済むのに無意味にリクエスト飛ばすのはよろしくない\nfoo -> fooo -> foo -> fooo -> foo みたいな入力をした場合に不必要にデータ飛んでしまう可能性\n3: 複数リクエストを発火した場合の処理\nA -> Bの順番にリクエストしたら B -> Aの順で返ってきちゃって表示がおかしくなる場合\nAnglar を扱ったサンプルの記事\n</pre>\n<h1>redux-sagaの説明</h1>\n<h2>redux-sagaとは何か</h2>\n<p>reduxのミドルウェアとして実装されたコンカレント処理エンジン(プロセスマネージャ)。コンカレント処理モデルはCSP<sup id=\"fnref-6\"><a href=\"#fn-6\" class=\"footnote-ref\">6</a></sup>に基づいている。並行性の単位は協調型マルチタスク(非プリエンプティブ)で、これらはコルーチンを使用して実現される。generator functionがコルーチン処理を実装するために使用されている。エフェクト(作用)をデータとして扱い、副作用の分離<sup id=\"fnref-5\"><a href=\"#fn-5\" class=\"footnote-ref\">5</a></sup>を可能とすることが特徴である。</p>\n<h2>generator functionでコルーチンってどういうこと?</h2>\n<p><a href=\"http://d.hatena.ne.jp/minekoa/20070410/1176177653\">こちら</a>などを参照。</p>\n<blockquote>\nジェネレータが作る「値を次々に返すモノ」は、味付けこそイテレータ風ですが、 本質的には コルーチン(coroutine) です。 コルーチンとは、「実行の途中でリターンでき、次回コール時にはそこから処理を再開することが出来るモノ」で*2、 「メインとサブ」という関係を持たないルーチンを示すします\n</blockquote>\n<h2>ジェネレータ関数/コルーチンでコンカレント処理ってどういうこと?</h2>\n<p>readux-sagaランタイムの処理を想像するに、以下のようなことをしていると思われる。</p>\n<ul>\n<li>ジェネレータ関数は一連のエフェクトを返すイテレータです。rootSagaなどのジェネレータ関数(saga)はそれぞれ一つのイテレータに対応します。</li>\n<li>\n<p>takeエフェクトの処理</p>\n<ul>\n<li>イテレータが特定のアクションをtakeするエフェクトを返したとき、アクションとイテレータの対応を保存しておきます。</li>\n<li>ReduxアプリケーションがReduxアクションをdispatchしたとき、redux-sagaミドルウェアはその対応を検索し、該当アクションでブロックしているイテレータに対してnext()を呼び出します(このときdispatchの引数を与えてnextを呼び出す。その値がyieldされる値となる)。</li>\n</ul>\n</li>\n<li>\n<p>callエフェクトの処理</p>\n<ul>\n<li>Promiseにつないだthen中でそのイテレータにnextします(Proimseの結果値がyieldされる値となる)。</li>\n</ul>\n</li>\n</ul>\n<p>他、タスク間の親子関係の管理、それに従うキャンセル処理、レースコンディション(race)の処理なども行なう。</p>\n<h2>redux-sagaはテストコードを書きやすくするものって聞いたんだけど</h2>\n<p>そういう効用はあるでしょうが、本質ではない。それが証拠に、仮にテストをしなかったとしてredux-sagaの効用は無くならない。複雑な非同期処理のハンドリングに本質的な価値がある。</p>\n<h1>大まかな意味での比較</h1>\n<p>ReactiveXもredux-sagaもいずれもイベントの繰り返しをイテレータに類する機能でハンドリングする。ただし前者は内部イテレータ(プッシュ型)、後者は外部イテレータ(プル型)風味である。</p>\n<h1>コード比較</h1>\n<h2>(比較対象として)Redux-observableの場合(<a href=\"http://qiita.com/inuscript/items/c672ddad4c24936b1061\">こちらの「完成品 &#x26; 最終形」</a>からの引用)</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// epic.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">searchEpic</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action$</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  action$<span class=\"token punctuation\">.</span><span class=\"token function\">ofType</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CHANGE_INPUT</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> payload <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">debounceTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">distinctUntilChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">searchApi</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token function\">loadResult</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> epics <span class=\"token operator\">=</span> <span class=\"token function\">combineEpics</span><span class=\"token punctuation\">(</span>\n  searchEpic<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Redux-sagaで書きなおしたコード</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// sagas.js</span>\n<span class=\"token keyword\">let</span> lastWord<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">changeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> word <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastWord <span class=\"token operator\">===</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  lastWord <span class=\"token operator\">=</span> word<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>searchApi<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadResult</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CHANGE_INPUT</span><span class=\"token punctuation\">,</span> changeInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記と<a href=\"https://github.com/uehaj/search-sample-saga/blob/master/src/store.js#L11\">ミドルウェアの組み込みのところ</a>以外はRedux-observable版と全く同じ。</p>\n<h1>redux-saga版ソースコード全体</h1>\n<p>redux-saga版のコード全体は<a href=\"https://github.com/uehaj/search-sample-saga\">こちら</a></p>\n<h1>redux-saga版のデモ</h1>\n<p>デモは<a href=\"https://uehaj.github.io/search-sample-saga/\">こちら</a>。</p>\n<h1>redux-saga版のコードの解説</h1>\n<h2>rootSaga saga全体</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CHANGE_INPUT</span><span class=\"token punctuation\">,</span> changeInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>rootSaga一行目</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<ul>\n<li>redux-sagaにおけるsaga<sup id=\"fnref-7\"><a href=\"#fn-7\" class=\"footnote-ref\">7</a></sup>はエフェクトをyieldするgenerator functionとして定義する(エフェクトについては後述)。</li>\n<li>sagaが記述している実行単位はタスクと呼ばれる。sagaをforkするとタスクが起動する。</li>\n<li>sagaによるタスク記述というのは<a href=\"https://en.wikipedia.org/wiki/Workflow_engine\">ワークフローエンジン</a>におけるワークフローシナリオと思えば良い。「こうなったらこうする」といったイベントベースの処理フローを、JavaScriptのif文やwhileループで書いていく。ただし、処理の各ステップは、「エフェクトをyieldする」という形式に統一する必要がある。すると複数のタスクがコンカレントに処理されたり、副作用を伴う処理をランタイムに任せたりすることになる。</li>\n<li>rootSagaでは、エントリポイントとしてページ全体で一回だけ最初にfork起動されるタスクを記述する。</li>\n</ul>\n<h2>rootSaga二行目〜</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CHANGE_INPUT</span><span class=\"token punctuation\">,</span> changeInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>takeLatestは、「Reduxアクションが発生したら指定したsagaからタスクをfork起動する、そしてすでに同じアクションに対して別のタスクが起動していたら、その先行するタスクはキャンセルする」という意味のエフェクトである。</li>\n<li>エフェクトは単なるデータである。エフェクトを解釈するのはredux-sagaランタイムであり、sagaは副作用を持たない純粋関数である。(だからテストがしやすい)</li>\n<li>エフェクトには、reduxアクションを待つtake、reduxアクションを発行するput、プロミスの完了を待つcallや、タスクを起動するfork、エフェクトを組合わせる各種エフェクト(race, takeLatest, ...)などがある。(<a href=\"https://redux-saga.js.org/docs/api/index.html#effect-creators\">参考</a>)</li>\n<li>上記では、「CHANGE_INPUTアクション」が発行されたとき、changeInput sagaをtakeLatestで起動している。これで元問題の「複数リクエストを発火した場合の処理」を解決している(先行するリクエストの結果は無視される)。</li>\n</ul>\n<h2>changeInput saga全体</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> lastWord<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">changeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> word <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastWord <span class=\"token operator\">===</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  lastWord <span class=\"token operator\">=</span> word<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>searchApi<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadResult</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>changeInput 1行目〜</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> lastWord<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">changeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">:</span>\n  <span class=\"token keyword\">const</span> word <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastWord <span class=\"token operator\">===</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  lastWord <span class=\"token operator\">=</span> word<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>「distinctUntilChanged」に対応する処理。前回実行した検索時のwordと一致していたら検索を行わずにリターンする<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>。これで「同じリクエストで済むのに無意味にリクエスト飛ばすのはよろしくない」問題を解決している。</li>\n<li><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>: 複数のsagaが並行実行される場合も考えると、共有変数で重複をチェックするこの方法は少々ナイーブである。ちゃんとやるならtakeLastestを使わずに明示的にtakeで回して、lastWordはそのループで参照するローカル変数にするのかな(changeInputを分離せずにrootSagaに展開)。もしくはreduxのstore変数にするのだが、それをやりたくないからsagaを使う面もある。</li>\n</ul>\n<h2>changeInput 2行目</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">changeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<ul>\n<li>chageInput sagaの定義である。前述のように、各段階でエフェクトをyieldするgenerator関数として定義されている。</li>\n</ul>\n<h2>changeInput 3行目</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">yield</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>delayは、指定したミリセカンド数遅延してからresolveするProimseを返す関数をcallするエフェクトを返すユーティリティ関数。意味は「400ms delayする」ただそれだけの話。</li>\n<li>これで元問題の「キーストローク毎にリクエストするのはよろしくない」問題が解決される。takeLatestと合せ技で、400ms以内に発行された先行タスクはキャンセルされるため。</li>\n</ul>\n<h2>changeInput 4行目</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> word <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>selectエフェクトは、stateから値を取り出す(たぶん同期的)。</li>\n</ul>\n<h2>changeInput 9行目</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>searchApi<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>callエフェクトはPromiseを返す関数の呼び出し。ここではsearchApi API関数を呼んでいる。awaitと同様に同期的に書ける。</li>\n</ul>\n<h2>changeInput 10行目〜</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadResult</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>putはreduxアクションを発行するエフェクトである。ここでは検索APIの呼び出し結果jsonをresultに設定するReduxアクションを発行する。</li>\n</ul>\n<h1>主観としての感想</h1>\n<p>RxJSは便利なオペレータが準備されていれば良し。ただしその大量のオペレータの正確な意味を覚え続けていられるか、他メンバーや未来の自分自身と共有できるかという問題がある。さらに上記コードにはないが、ストリームが分岐したり合流したりしたとき、極めて分かりにくいコードになる。</p>\n<p>redux-sagaは「ベッタベタ」のコードとなり、数個のエフェクトの意味さえ押えれば読み書きができる。使いこなすにはES2015のジェネレータ関数のシンタックスとセマンティクスについてある程度熟知しておく必要はある。</p>\n<p>要するに、「FRPの語彙」と、「ifやwhileや関数呼び出しなどの古典的命令的プログラミングの語彙」のいずれを好むのか、が両者の差異の核心である。</p>\n<hr/>\n<p>こちらもどうぞ → <a href=\"/eaa039a7ce44d5969f06\">Redux-Sagaでテトリス風ゲームを実装して学んだこと</a>。</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-7\">\n<p>redux-sagaのsagaという名は、長命分散トランザクションにおけるエラーハンドリングの<a href=\"https://medium.com/@roman01la/confusion-about-saga-pattern-bbaac56e622\">sagaパターン</a>から来ている。転じて、プロセスマネージャを意味する場合もあるようで、redux-sagaはこの意味でのsagaである。ただし、後者はそもそも誤用に近い用法である気がする。</p>\n<a href=\"#fnref-7\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-6\">\n<p>CSPは<a href=\"https://ja.wikipedia.org/wiki/Communicating_Sequential_Processes\">Concurrent Sequencial Processing</a>の略。redux-sagaはtake/putに関してredux action型を持つ単一のチャンネルを扱うCSPと見做せる<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>。redux-sagaを典型的なCSPとよぶべきかはわからないが、語呂が良いのでこういうタイトルにした。コルーチンとかワークフローエンジンとか副作用の分離などで置き換えても良いと思う。</p>\n<a href=\"#fnref-6\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-5\">\n<p>副作用のデータ化と分離は、<a href=\"https://guide.elm-lang.org/architecture/\">Elm Architecture</a>にインスパイアされていると感じられる。</p>\n<a href=\"#fnref-5\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>redux-sagaでは<a href=\"http://qiita.com/wadahiro/items/7d54a6be592d06bdf559\">複数チャンネルも扱える</a>。</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"January 01, 1970","path":"/bee9b9dd8279b1a769bb","title":"redux-sagaで検索機能の実装を写経してCSPのパワーを感じる","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}