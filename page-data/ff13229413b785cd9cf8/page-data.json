{"componentChunkName":"component---src-templates-blog-template-js","path":"/ff13229413b785cd9cf8","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<h1>関数型プログラミングを業務開発で活用するために</h1>\n<p>HaskellやScala、Erlang/Elixir、Clojureなどの関数型プログラミング言語に興味がある人は多いと思いますが、自分らが日常行なっている業務での開発では到底それらの関数型言語を採用できないのが現実、という場合があるかもしれません。</p>\n<p>なので、当面はJavaやGroovy、JS,Ruby,Pythonなどの非関数型プログラミング言語の上で関数型プログラミングスタイルや考え方をなるべく使っていくことでFPの考え方や技法に馴染み広めていき、利点を享受しつつ、将来は大手を振って<strike>転職</strike>業務開発で本格的な関数型言語を使えるようにしていこうというのが現実的な戦略かもしれません。</p>\n<p>以下はそのような目的での<strike>洗脳</strike>勉強会をやるための架空の資料の目次(案)のようなものです。</p>\n<blockquote>\n<p>「独自研究」の注意</p>\n<p>「FPとは何か」の定義について、現時点で一般に合意のある明確な唯一のものはないように見えます。しかし、上の目的を達成するためには「関数型プログラミングの本質は、非関数型言語での適用においても同様に有効だ、OOPと併用できる」という結論になる必要があります。また、良くある説明「関数型プログラミングには定義がなく人によってうんたらかんたら」というのも、「わかんねーよ!!おまえら初心者だと思って馬鹿にしてんのか」という印象を持たれる可能性があります。これらの問題を解決するため、本記事では意図的に独断的にFPの本質的定義を提示します。読者の方の認識と一致しない場合、「一つのあり得る説明のしかた」としてでも見ていただけますとありがたいです。コメント歓迎です。</p>\n</blockquote>\n<blockquote>\n<p>(追記)\n「FPに定義などいらない書けばわかるさ」という意見もあると思いますが、またそれも一面の真理だと思いますが、それだと体験している特性が言語のものなのか、関数型パラダイムのものなのか弁別できません。それでも良いとは思いますが、この記事における独断的定義は、<b>他の言語、特に非関数型プログラミング言語に持ち込んでもなお有効であれば、つまり具体的な関数型言語それぞれの利点を完全に除去しても残っている特性があり利点を発揮し続けるのであれば、それこそが、あるいはそれのみが、個々の言語の利点と言うにはとどまらない関数型プログラミング固有の本質的な有効性と呼ぶに値する</b>のではないか、という仮説に基づいています。ただ、言語個別のメリットを除去することによって「FPとしては残ってるのはほんのちょっぴり」に感じられたらごめんなさい。</p>\n</blockquote>\n<h1>関数型プログラミング(FP)とは何か？</h1>\n<ul>\n<li>現象面・表象面では以下のとおり</li>\n<li>(1)再代入をしない</li>\n<li>(2)不変的データを使う(破壊的操作を禁止する)</li>\n<li>(3)値を返さない関数や式・制御構造を使用せず、値や式、返り値を返す関数(メソッド)間の依存関係から構成される式木としてプログラムを記述する</li>\n<li>\n<p>以下はFPの必要条件とはしない。つまりFPにおいても許容する。理由は、完全には達成できないし、もしできたとしても入出力をしないプログラムには意味がないため。</p>\n<ul>\n<li>(4)副作用としての入出力禁止。</li>\n</ul>\n</li>\n</ul>\n<h1>「FPの本質」とは</h1>\n<ul>\n<li>\n<p>プログラムの実行は、引数を入力として結果を得るような計算であるとみなした上で、<br>計算結果を得るために必要な値の間の依存関係を、そのまま平たくプログラムに書き出すこと(cf.<a href=\"https://ja.wikipedia.org/wiki/%E9%A0%85%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88\">項書き換え</a> ※)</p>\n<ul>\n<li>\n<p>結果を得るための計算が、「変更される状態、すなわちプログラムの実行=計算の進行によって刻々と変わっていく値」には依存しないようにする(メモ:図が必要)</p>\n<ul>\n<li>排除できなければ分離する</li>\n</ul>\n</li>\n<li>宣言的とも言う</li>\n<li>←→命令型、手続き型</li>\n</ul>\n</li>\n<li>この特性から、上の(1)(2)(3)が結果として導入される。また後述の「FPの効用」が得られる。</li>\n</ul>\n<blockquote>\n<p>(追記)\n※ここで「項書き換え」をFPの本質と言っているわけではなくて、計算の結果の値を得るために必要な値の集合(葉としての引数・定数、中間計算結果としての節)の依存関係を有向グラフとみたときにプログラムないし着目した関数の評価の過程を通じて、<b>そのグラフが静的に定まっている</b>(ボトムがあるからこの表現が適切かは確信ありませんが)、ということを言っています。項書き換えなりは評価戦略の話であり、結果的には得られる値が同じになるので参考としてリンクを貼りましたが、そこは主眼ではないです。</p>\n</blockquote>\n<h1>上の説明に「関数」と言う言葉が出てきませんが?</h1>\n<ul>\n<li>それでよい。関数はここでは値の依存グラフを表現するための名前の付いた結節点にすぎない。</li>\n</ul>\n<blockquote>\n<p>(追記)</p>\n<ul>\n<li>関数の振る舞いの特性に限定した定義にしてしまうと再代入禁止の根拠が薄れる。loopカウンタによる単なるforループの存在や、i=1;i++というコード断片を私はシンプルな統一的根拠によってなるべく否定したい。</li>\n<li>「関数」の意味するものは言語によって異なる。かといって数学的関数で規定したくもない。だって明確化したいプログラムの振る舞いは、それとは実際に異なるものだから。嘘だと思うなら、純粋関数と信じるものを書き下して、呼び出し前の時刻と呼び出し後の時刻を計測してみると良い。「時間が経過した」という副作用を観測する事ができるから（cf.sleep sort）。電力消費量と熱雑音操作して音楽を鳴らすことだってできるらしいし。</li>\n<li>計算に必要な値の依存関係に着目するのは、そのような関数概念や副作用概念の定義の差異やブレが介入できないと言う意味で本質的、少なくとも実用的である。</li>\n</ul>\n</blockquote>\n<h1>FPでやりたいこと・やれること</h1>\n<ul>\n<li>\n<p>上記で「禁止」「排除」されたものは誰かが背負うことになる。</p>\n<ul>\n<li>ランタイムがやる←Haskell</li>\n<li>ライブラリがやる←FRP…</li>\n<li>ユーザーコードの中で分離する。</li>\n</ul>\n</li>\n<li>なので、結局やってることは「副作用の分離と管理」である。\nこの観点から、前述の<b>「(4)副作用としての入出力」も射程に入る</b>。\n入出力が禁止できなくても、分離もしくは管理できれば良し(HaskellのIOアクションがやっていることの一つ)。</li>\n<li>「FPにおいて(副作用などを)禁止することで得られるものは何か？」\nは、問いが間違っていたことになる。\nFPは副作用を禁止しない。それを分離・管理する技術である。</li>\n<li>FP以前も副作用、明示的状態管理はなされてきた。FPは、純粋関数、参照透過性という基準を元に明確にコード上に明確に\nわかる形で意識してやろうとする、のが違い。</li>\n</ul>\n<h1>純粋関数と参照透過性</h1>\n<h2>不純さは伝染する</h2>\n<p>tbd</p>\n<h1>FPではないもの</h1>\n<ul>\n<li>「狭義のFP」は、前述のとおり(異論はあるであろうが、この記事ではそうする)</li>\n<li>「広義のFP」は、高階関数があればFPだというタワゴト含めいろいろあるので、\nおいとく。</li>\n<li>\n<p>「パターンマッチ、遅延評価、タプル、ADT、静的型付け、高階型に代表される強力な型システム、型クラス、定理証明、カリー化と部分適用、モナド、do記法、内包表記、第一級関数、高階関数」などはFPではない。</p>\n<ul>\n<li>ただしいずれもFPの適用を助ける面がある。これらがFPの本質と不可分だ、と言いたくなる気持を持つ人も出てくるだろうし、その気持はわからんでもない。しかし本記事ではそういう主張は趣旨に反するので抑える。</li>\n<li>上記を提供するのがいわゆる「関数型言語」の存在意義であり、実際有用。</li>\n</ul>\n</li>\n</ul>\n<h1>FPの効用</h1>\n<ul>\n<li>\n<p>品質向上、バグ減少</p>\n<ul>\n<li>状態更新がないので動作の見通しが立てやすく、コード修正(順序変更、追加、削除)の影響が限定的で安定的。</li>\n<li><a href=\"http://developers.srad.jp/story/14/11/08/081210/\">プログラミング言語がソフトウェアの品質に与える影響</a></li>\n</ul>\n</li>\n<li>\n<p>合成可能性の向上、部品化</p>\n<ul>\n<li>文脈としての状態に依存しないので異なる場所での利用がしやすい。</li>\n<li>関数合成によるプログラミング(モナド、アロー、コンビネータライブラリ、モナドトランスフォーマー、ミドルウェアパターン、デコレータ関数)★</li>\n</ul>\n</li>\n<li>\n<p>テストしやすさの向上</p>\n<ul>\n<li>プロパティテスト★</li>\n</ul>\n</li>\n<li>\n<p>状態を切り出すことによって実現が容易になる機能</p>\n<ul>\n<li>タイムトラベリングデバッグ、…</li>\n</ul>\n</li>\n<li>高度な抽象概念をモナド、アロー等で表現・部品化★</li>\n</ul>\n<h1>演習</h1>\n<h2>(1)ループ操作をコレクションを操作する高階関数で表現する</h2>\n<p>リスト(言語によっては配列、シーケンスなどで良い)を逆順にするプログラムを関数型プログラミングスタイルで記述せよ。例として、ループで書かれたプログラム(Groovy)を前述のFPの定義に従って修正する。</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">List <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span>List list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    list<span class=\"token punctuation\">.</span>reverseEach <span class=\"token punctuation\">{</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\nprintln <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">:</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">:</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ==&amp;gt; [[21, 11, 1], [22, 12, 2], [23, 13, 3]]</span></code></pre></div>\n<h2>(2)ループの中断を遅延ストリームで表現し、部品化を高次元で達成する</h2>\n<p>ファイルが複数個(n個)あるとします。それぞれのファイルサイズはわかっています。これらのファイル群のファイルサイズを整数のリスト[s1, s2, s3, .... sn]で表現します(sn>=0)。これをlistと呼びます。listの長さはnになります(n>=0)。この「ファイルサイズのリストlist」が表現するファイルをこの順序で、容量limitSizeのフロッピーディスクにコピーする必要があるとします(limitSize>=0)。合計値がlimitSize以下になるように、ファイルを選択してください。具体的には、listの先頭からの部分リストで、その合計値がlimitSize以下であり、長さが最長のものを返す関数を任意の言語で(関数型っぽく)書いてください。listの順序は変更できませんし、listの先頭からスキップすることなく順にコピーする必要があります。Groovyのコード例(関数型っぽくない元の例)は以下のとおり。</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">List<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>Integer<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span>List<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>Integer<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limitSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>limitSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">..</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> list\n<span class=\"token punctuation\">}</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; [15, 50, 2, 20, 8]</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; [15]</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; [15, 50, 2, 20, 8, 16, 7, 22]</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; []</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; [15, 50, 2, 20, 8]</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; [15, 50, 2, 20]</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; []</span>\nprintln <span class=\"token function\">func0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">94</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =&amp;gt; [15, 50, 2, 0, 0, 0, 0, 20, 0, 0]</span></code></pre></div>\n<h2>(3)キューを非破壊的に実装し、状態を切り出す</h2>\n<p>待ち行列をFP、つまり非破壊的操作のみで実装してみましょう。以下はGroovyの例(破壊的操作での例)です。状態を切り出して、とかになるはずです。並列処理は考えないでも良い例外やエラーについても考慮しても良い(Optionとか)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token class-name\">E</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token class-name\">E</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">assert</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span>\n<span class=\"token keyword\">assert</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">assert</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\nq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">6</span></code></pre></div>\n<h1>非関数型言語でのFP適用の勘所</h1>\n<ul>\n<li>「(1)再代入をしない」「(2)破壊的操作をしない」\nは高階関数の活用により可能。便利な高階関数ライブラリや非破壊的\nデータ構造のライブラリがあればなおよい(cf.純粋関数型データ構造)。</li>\n<li>\n<p>細かく見ると、(2)は以下にわかれる。</p>\n<ul>\n<li>(2-1)状態の処理を持たない</li>\n<li>(2-2)本質的に状態を必要とする処理</li>\n</ul>\n</li>\n<li>\n<p>(2-1)は慣れれば容易。練習あるのみ。</p>\n<ul>\n<li>map(collect), fold(join),scan(accumulate),zipなどを息を吐くように使えるようになる。</li>\n<li>十分な機能をもった高階関数ライブラリは欲しい(Rx,EclipseCollection,underscore,lodash,ES2015...)。</li>\n</ul>\n</li>\n<li>\n<p>(2-2)は原理的には「引数に状態を渡して返り値として新しい状態も返す」関数に書きかえれば良い</p>\n<ul>\n<li>ただし読みにくくなる(連続して操作する場合特に)</li>\n<li>状態書き換え後に、古い状態を使う必要なければむしろ状態をとりちがえるバグの元となる。</li>\n<li>Stateモナド導入できると良いのだが★</li>\n<li>とりあえずの工夫としては「状態の外出しによる純粋操作」と\n「状態管理に特化した部分」に分離し、選択的に使用する\n(両者の結合はクロージャがあれば簡単)。</li>\n<li>もしくは割りきって、状態書き換えを許容する。(特に大きな問題があるわけではない)</li>\n</ul>\n</li>\n</ul>\n<h2>OOPとの併用のための留意点</h2>\n<ul>\n<li>\n<p>レシーバ形式のレシーバ(this)をメソッド第一引数として見る</p>\n<ul>\n<li>Java 8のメソッド参照演算子::とGroovyの.&#x26;演算子の差異</li>\n<li>上記のクロージャでの代用</li>\n<li>参考: <a href=\"http://d.hatena.ne.jp/lyrical_logical/20111107/1320671610\">open recursion</a>, <a href=\"http://tune.hateblo.jp/entry/2015/03/27/035648\">Haskellオブジェクト指向に触れてみよう〜初級編〜</a>, Lens</li>\n</ul>\n</li>\n<li>クラス定義、継承、仮想関数</li>\n<li>\n<p>例外処理との相性</p>\n<ul>\n<li>型による失敗の表現: Optional(Option,Maybe,Either)</li>\n<li>非同期例外(RuntimeException)は副作用</li>\n</ul>\n</li>\n</ul>\n<h1>flatMapの真実</h1>\n<p>tbd</p>\n<h1>非関数型言語でのFP適用の限界</h1>\n<ul>\n<li>\n<p>言語のサポートがないので自力でがんばる</p>\n<ul>\n<li>FP言語をたとえばScalaやHaskellで学び、その知識を持ち込む</li>\n<li>課題は前提知識のない他の開発者には不自然に感じられるかもしれないこと\n(本記事でカバーしたい点でもある)。</li>\n</ul>\n</li>\n<li>「★」で示したところは、現時点では、非関数型プログラミング言語での開発に無理に\n持ち込まない方がよいと思っているところ。</li>\n<li>\n<p>FPを活用するライブラリの使用が一番問題がない。</p>\n<ul>\n<li>用途にあえば是非トライを</li>\n</ul>\n</li>\n</ul>\n<h1>FPを活用するライブラリなど</h1>\n<ul>\n<li>FRP, <a href=\"http://reactivex.io/\">ReactiveX(Rx)</a>, <a href=\"https://gist.github.com/masakielastic/5897831\">BaconJS</a></li>\n<li>React/ <a href=\"https://github.com/reactjs/redux\">Redux</a></li>\n<li>Promise/Future/Observable</li>\n<li>Immutable.JS</li>\n<li><a href=\"http://www.functionaljava.org/\">FunctionalJava(fj)</a>, <a href=\"https://github.com/mperry/functionalgroovy\">Functional Groovy</a></li>\n<li><a href=\"https://www.eclipse.org/collections/\">Eclipse Collection</a>(旧GS Collection)</li>\n</ul>\n<h1>関連トピックス紹介</h1>\n<ul>\n<li>CQRS</li>\n<li>RESTfulアーキテクチャ</li>\n<li>べき等性</li>\n<li>STM</li>\n<li>Datomic</li>\n<li>イミュータブルデータモデル</li>\n<li>Elm, Frege</li>\n</ul>\n<p>さあみなさんも関数型ライフを!</p>","frontmatter":{"date":"January 01, 1970","path":"/ff13229413b785cd9cf8","title":"関数型プログラミングを業務開発に適用するための架空の社内勉強会資料","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}