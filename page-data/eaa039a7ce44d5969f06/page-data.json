{"componentChunkName":"component---src-templates-blog-template-js","path":"/eaa039a7ce44d5969f06","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<h1>はじめに</h1>\n<p><a href=\"https://qiita.com/advent-calendar/2017/react\">React #1 Advent Calendar 2017</a>の11日目です。</p>\n<p>Reduxのミドルウェア「Redux-saga」で「やや複雑なリアルタイムゲーム」としてテトリス風のゲームの基本部分を開発し、それを通じて学んだこと・感じたことを紹介します。</p>\n<h1>画面例</h1>\n<p>まずは実装したテトリス風ゲームの画面例。矢印キーの左右下でピースを動かし、z,xで回転です。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/86cb9f8e-b2df-6747-51f0-fa7fefb1f2a5.gif\" alt=\"sagaris.gif\"></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/b621eae9-5c08-3d95-f0ce-c3ee5b91c08e.gif\" alt=\"sagaris2.mov.gif\"></p>\n<p>実際に<a href=\"https://uehaj.github.io/redux-saga-tetris/index.html\">こちら</a>から遊べます。ソースコードは<a href=\"https://github.com/uehaj/redux-saga-tetris\">こちら</a>から。</p>\n<h1>テトリス風ゲーム実装を通じて学んだこと</h1>\n<p>Redux-Sagaの効用として良く言われるのは、「作用を分離する」とか「テストを簡単にする」ということです。それ以外に、今回、ゲームの実装を通じて思ったこと、思いついたことをつらつらと書いていきたいと思います。</p>\n<ul>\n<li><strong><em>利点1.</em></strong> ビューからビジネスロジックを分離する</li>\n<li><strong><em>利点2.</em></strong> ロジックとロジックの間を疎結合にする</li>\n<li><strong><em>利点3.</em></strong> ロジックフローの明確化</li>\n</ul>\n<p>それぞれ説明します。</p>\n<h2><strong><em>利点1.</em></strong> ビューからビジネスロジックを分離する</h2>\n<h3>React単独だと分離できない</h3>\n<p>コンポーネント指向のビューライブラリであるReactにおいて、ロジックは起点としてonClickなどに設定するコールバック関数、もしくはコールバックから呼び出す関数やメソッドで実現されます。このとき、依存性は以下のようになります。</p>\n<p><img src=\"http://www.plantuml.com/plantuml/png/SoWkIImgAStDuSf9JIjHACbNACfCpoXHICaiIaqkoSpFuz9ut3pvSVFInyrxD1LqTUqK5802QnytxNZStFouQRqcbqDgNWfGFm00\" alt=\"alt\"></p>\n<p>ビューはロジックに依存します。たとえば、イベントが発生したときに実行されるロジックの処理が存在するか否か、処理の個数、メソッド名や引数の変更などに応じてビューを変更しなければならない可能性があります。<sup id=\"fnref-11\"><a href=\"#fn-11\" class=\"footnote-ref\">11</a></sup></p>\n<h3>Reduxと組合わせれば…</h3>\n<p>Reduxは、ビューから状態を分離します。さらにビューは「Actionをdispatchする」という建前なので、依存性は以下のようになります。</p>\n<p><img src=\"http://www.plantuml.com/plantuml/png/SoWkIImgAStDuSf9JIjHACbNACfCpoXHICaiIaqkoSpFuz9ut3pvSVFInyrxD1LqTUqKD1p1uffS2d2cGbsT0b3PsiTDEnutDpzkMg_9vP2Qbm8q5G00\" alt=\"alt\"></p>\n<p>Actionを介して依存性の逆転を行うことができ、ビューはActionのみに依存するようになります…。\n…と言ったか? <b>それは嘘だ。</b></p>\n<h3>Redux-thunk(その他)ではビュー→ロジックの依存性を排除できない</h3>\n<p>Redux-thunkでは「Actionをdispatchするかわりに関数をdispatchする」というだけのものなので、「どの処理をすべきか考え、どこに処理があるかを見つけて取得するか記述して、dispatchに渡す」という責任がビューにあります。ロジックが記述されているのがメソッドであろうがアロー関数であろうが、Action Creatorで隠蔽しても同じことです。</p>\n<p>Redux-thunkに限らず、ロジックをコンポーネントのメソッドに書く場合でも、mapDispathchToPropsに書く場合でも、ImmutableJSのRecordのメソッドに書く場合でも同じです。<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>もちろん、ロジックを変更したときにビューへの影響が最小限にするための努力は可能でしょう。たとえば、「将来に変更が必要にならないように、ロジックの関数名やシグネチャを十分事前に検討する」などです。しかしながら、予測できないことは発生するのが常であり、限界があると知るべきでしょう。</p>\n<h3>Redux-Sagaで実現されるビュー→ロジックへの依存の完全排除</h3>\n<p>Redux-Sagaでは、Actionは<strong><em>かならずシンプルなデータ</em></strong>であり、ビューが発行するActionに対してどんな処理が実行されるか、そもそも処理が実行されるかどうかすら、ビューの関知することではありません。このことがビューの債務を明確かつ単純にしてくれ、また試験を容易にしてくれることは明らかです。\nRedux-Sagaの効用の一つは、以下のような依存性の逆転をきちんと実現することです。</p>\n<p><img src=\"http://www.plantuml.com/plantuml/png/SoWkIImgAStDuSf9JIjHACbNACfCpoXHICaiIaqkoSpFuz9ut3pvSVFInyrxD1LqTUqKD1p1uffS2d2cWeskheB6uwRzZvjsFcvQh_-uUUtZfXsFcvk174qkXzIy5A050000\" alt=\"alt\"></p>\n<p>Actionさえ完成していれば、ビューを完成させテストすることができるし、タスク/ロジックについても同様です。</p>\n<p>タスクはRedux-Sagaが実現する並行動作の単位であり、Actionの発生を監視し、Actionに応じて処理を実行する存在です(Sagaと呼びます)。</p>\n<p>さらに、<a href=\"http://www.s-arcana.co.jp/blog/2017/03/07/3499\">『実践 Redux Saga』 – React, FLUX, Redux, Redux Saga – // 第21回社内勉強会 #sa_study</a>で紹介されている「<a href=\"https://medium.com/@marcelschulze/using-react-native-with-redux-and-redux-saga-a-new-proposal-ba71f151546f\">Using React (-Native) with Redux and Redux-Saga. A new proposal?</a>」のアーキテクチャを援用すれば、ビューから発行されるのは「UIアクション」のみとなり、もはや「Action(動作)」という意識も薄れることになります。ビューの債務は、「動作」や「reducerでデータを更新すること」にも関知せず、「HOWや動作を考えず、UIアクション(そのUIイベントを最小完全に表現するデータ)を発行すること」に縮退するのです。</p>\n<p>上記のアーキテクチャのポイントの一つは、ActionをUser/System/Reducer Actionの3種類にわけるというものですが、今回、ちょっとアレンジ<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>して、以下のようにしてみました。</p>\n<ul>\n<li>UIアクション…ビューのみが発行し、Sagaのみがtakeする。</li>\n<li>システムアクション…ビューあるいはSagaが発行し、Sagaのみがtakeする。</li>\n<li>Reducerアクション…Sagaのみが発行し、Reducerのみが受けとる。</li>\n</ul>\n<p>これに従って今回実装したテトリス風ゲームのAction一覧は以下のとおりです。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">種別</th>\n<th style=\"text-align: left\">アクション</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\" rowspan=\"5\">UIアクション</td>\n<td style=\"text-align: left\">UI_BUTTON_CLICKED</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">UI_KEY_DOWN</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">UI_MODAL_OPEN</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">UI_MODAL_OK</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">UI_MODAL_CANCEL</td>\n</tr>\n<tr>\n<td style=\"text-align: left\" rowspan=\"5\">システムアクション</td>\n<td style=\"text-align: left\">SYS_TIME_TICK</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SYS_GAME_START</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SYS_GAME_QUIT</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SYS_GAME_OVER</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SYS_FIX_DOWN_PIECE</td>\n</tr>\n<tr>\n<td style=\"text-align: left\" rowspan=\"8\">Reducerアクション</td>\n<td style=\"text-align: left\">UPDATE_CELL</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SET_BOARD</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SET_CURRENT_PIECE</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SET_GAME_RUNNING</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SET_GAME_PAUSING</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SET_MODAL</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">SET_SCORE</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ADD_SCORE</td>\n</tr>\n</tbody>\n</table>\n<p>イメージわきますでしょうか。システムアクションはロジックにかかわる、アプリケーションで発生する意味的なレベルのイベントです。\nReducerアクションのreducerでのハンドリングは本当に機械的なstoreの更新のみです。ロジックは全く・ほとんど含みません。もし含むとしたらバリデーションみたいなものでしょうか。</p>\n<h3><strong><em>利点2.</em></strong> ロジックとロジックの間を疎結合にする</h3>\n<p>Redux-Sagaではコンカレントに動作する複数のタスクを記述することができます。</p>\n<p><img src=\"https://camo.qiitausercontent.com/f3a9835dc103b7037d34144facb1d0417f4205d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f36393836302f38636331613837332d633637352d393030392d353730642d3936383464613461373034662e706e67\" alt=\"alt\">\n(<a href=\"https://qiita.com/kuy/items/716affc808ebb3e1e8ac\">「redux-sagaで非同期処理と戦う」</a>より引用)</p>\n<p>並行動作するタスクととタスクの間の連携や連動、同期のキック処理は、ビューとタスクと同様に、シンプルデータとしてのActionのみが取り持ちます。(ちなみにこのときのActionは、go言語のCSPチャンネルのように振る舞っていると言えるんじゃないかと思います)</p>\n<p>ビューとタスクの依存性を除去したのと同じように、タスク間において、タスクを追加したり、変更したりすることが他のタスクへの影響を及ぼさないようにすることができます<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>。</p>\n<p>書き方にもよるのですが、たとえば今回のテトリス風ゲームで言えば、ゲームの起動画面の処理と、実際のゲームの処理を分けることができます。</p>\n<p>以下は起動面側のタスク「<a href=\"https://github.com/uehaj/redux-saga-tetris/blob/master/src/sagas.js#L168\">sagas.js</a>」での処理です。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">demoScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Config<span class=\"token punctuation\">.</span><span class=\"token constant\">PREDICTABLE_RANDOM</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Math<span class=\"token punctuation\">.</span><span class=\"token function\">seedrandom</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sagaris'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// デモ画面</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">UI_KEY_DOWN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>payload <span class=\"token operator\">!==</span> Keys<span class=\"token punctuation\">.</span><span class=\"token constant\">KEY_S</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* do nothinng */</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ゲーム開始</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setGameRunning</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">sysGameStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ゲームオーバー、もしくはQ押下を待つ</span>\n    <span class=\"token keyword\">const</span> gameResult <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      over<span class=\"token operator\">:</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">SYS_GAME_OVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      quit<span class=\"token operator\">:</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">SYS_GAME_QUIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setGameRunning</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gameResult<span class=\"token punctuation\">.</span>over<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ゲームオーバー画面(確認ダイアログ)表示</span>\n      <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">gameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ここでは、\"Ｓ\"キーの入力を待ち、SYS<em>GAME</em>STARTイベントを発行し、SYS<em>GAME</em>OVERもしくはSYS<em>GAME</em>QUITイベントを待ちます。ゲームを実行する別のタスクがSYS<em>GAME</em>STARTイベントを待ち受けています。demoScreenは、gameのことを何も知りません。逆も然りです。</p>\n<h3><strong><em>利点3.</em></strong> ロジックフローの明確化</h3>\n<p>Redux-Saga以前、ブラウザ内で動作するJSコードはServiceWorker, WebWorkerを除き本質的には「イベントハンドラの集合」であり、複数のイベントに関連する「一連のロジック」を協調的に実行させる場合、イベントハンドラ間の連携は状態変数(reduxではstateなど)で表現する他はありませんでした。これはBSDソケットのselectを使った通信処理や、協調型イベントドリブンプログラミングと同じ状況で、コンテキストを維持するスレッド等が無いので「どこまで処理が進んだか」という情報で状態を共有できないためです。</p>\n<p>たとえばウィザード形式の入力フォーム\u000eで、入力が「どこまで進んだか」を表わすstateを保持するとか、あるいはモーダルダイログを「今開き中です」みたいなstateを定義するとかが典型的ですが、UIの複数箇所で進行中のものがあったりネストしたりすると記述が煩雑になります。</p>\n<p>また、Redux-Sagaを使うと「待ち受ける処理」すなわちイベントハンドラやコールバックをプル型、すなわち同期的に「取ってきくる」処理のように記述できます。async/awaitと同じですが、Redux-SagaではGeratorを用いてPromiseに限らず前述のUIアクションやシステムアクションの待ちうけを実行することができます。</p>\n<p>たとえば、テトリス風ゲームでは<a href=\"https://github.com/uehaj/redux-saga-tetris/blob/master/src/sagas.js#L88\">タスクpieceFall</a>で以下のような処理を実行しています。</p>\n<ol>\n<li>新しい落下テトロミノのピースを乱数で決定する。</li>\n<li>ピースをボードの初期位置に置けないならGAME_OVERシステムイベントを発行する</li>\n<li>ピースを「現在のピース」に設定する</li>\n<li>「キーの入力、一定時間経過、現在のピースが一番下まで落下して固着」のいずれかが発生するまで待つ</li>\n<li>発生したイベントが「現在のピースが一番下まで落下して固着」のときスコアを増加</li>\n<li>現在のピースが一番下まで落下したが未だ固着していないなら「余裕時間」タスクをバックグラウンド起動。</li>\n<li>余裕時間タスクはカウントダウンして、余裕時間が終了すると「現在のピースが一番下まで落下して固着」イベントを発行</li>\n<li>入力キーが'Q'や'P'のときポーズ処理や、終了の確認モーダルダイアログ処理</li>\n<li>一定時間が経過したか、↓キーが入力されたときピースを下方移動。</li>\n<li>その他の方向キーが入力され\bたときピースをその方向に移動</li>\n</ol>\n<p>該当部分のコードは以下のとおりです。</p>\n<div class=\"gatsby-highlight\" data-language=\"js:saga.js\"><pre class=\"language-js:saga.js\"><code class=\"language-js:saga.js\">  :\nexport function* pieceFall() {\n  let piece = new Piece(3, 1, Math.floor(Math.random() * 7), 0);\n  let board = yield select(state =&gt; state.main.board);\n  if (!piece.canPut(board)) {\n    // トップ位置に置けなければゲームオーバー\n    yield put(Actions.sysGameOver());\n    return;\n  }\n  yield put(Actions.setCurrentPiece(piece));\n\n  let stcTask = null;\n  while (true) {\n    const { keyDown, fixDown, timeTick } = yield race({\n      keyDown: take(Types.UI_KEY_DOWN),\n      fixDown: take(Types.SYS_FIX_DOWN_PIECE),\n      timeTick: take(Types.SYS_TIME_TICK),\n    });\n    if (fixDown) {\n      // this piece is fall to bottom or other piece, and fixed\n      board = piece.setTo(board);\n      const [newBoard, clearedLines] = Board.clearLines(board);\n      board = newBoard;\n      yield put(Actions.setBoard(board));\n      // line clear bonus\n      yield put(Actions.addScore(Config.LINES_SCORE[clearedLines]));\n      break;\n    }\n    // 固定時間処理タスクを起動\n    if (piece.reachedToBottom(board)) {\n      if (stcTask === null) {\n        stcTask = yield fork(slackTimeChecker);\n      }\n    } else if (stcTask !== null) {\n      // 固定時間中の操作で底から脱却したときは固定時間を抜ける\n      yield cancel(stcTask);\n      stcTask = null;\n    }\n    if (keyDown) {\n      if (keyDown.payload === Keys.KEY_Q) {\n        yield* gameQuit();\n      } else if (keyDown.payload === Keys.KEY_P) {\n        yield* gamePause();\n      }\n    }\n    if (keyDown || (timeTick &amp;&amp; timeTick.payload % 60 === 0)) {\n      // calcurate next piece position &amp; spin\n      const nextPiece = piece.nextPiece(\n        (keyDown &amp;&amp; keyDown.payload) || Keys.KEY_ARROW_DOWN\n      );\n      if (nextPiece.canPut(board)) {\n        if (\n          nextPiece !== piece &amp;&amp;\n          keyDown &amp;&amp;\n          keyDown.payload === Keys.KEY_ARROW_DOWN\n        ) {\n          yield put(Actions.addScore(1));\n        }\n        piece = nextPiece;\n        yield put(Actions.setCurrentPiece(piece));\n      }\n    }\n  }\n}</code></pre></div>\n<p>1つのピースを生成し、落下しつつ操作され、最後に固着するまでが一連の処理として書かれています。イベントを発生させたり、あるいはイベント発生を待ちあわせたり、「一連の処理」が連携し、データをローカル変数として共有しながら連続していきます。</p>\n<p>このような一連の処理を、たとえばasync/awaitなり、Reduxステートなり、あるいはRxJSで読みやすく書けるのかに疑問を持っています。まあもちろん、Redux-Sagaのコードが本当に読みやすいかにも疑問を持つべきですが、可読性の底ぬけ崩壊を避け、踏ん張れるかな、という印象です。</p>\n<h1>業務用アプリでも役にたつのか?</h1>\n<p>もっとも、リアルタイムゲームではなく、一般的な業務用アプリで上記ぐらいの制御が求められるのか、という疑問もあるでしょう。この疑問については、まずは複雑なものを読み易く書き下せるなら、より簡単なものを書くことにも恩恵がある、ということが言えます。\nまた、以下のようなケースでは業務用アプリでも恩恵があるでしょう。</p>\n<ul>\n<li>ウィザード形式のフォーム入力など、ステップ・分岐で進行する処理。</li>\n<li>\n<p>サーバプッシュやサーバ状況変化への対応</p>\n<ul>\n<li>たとえば、編集している帳票が他の人によって削除されたり、チャットしている相手がログアウトする</li>\n<li>たとえば「予約」のような刻々と状況が変化する対象に対する処理</li>\n<li>たとえば監視系のコンソール</li>\n<li>電波状況の変化によってオフライン・オンラインになったときのデータ更新、オフラインになっていた他者がオンラインになることによる更新</li>\n</ul>\n</li>\n<li>IDEのような複数ペインで同時進行するUI処理。例えばVSCodeのコンソール出力やバックグラウンドでのエラーチェック、など。</li>\n<li>\n<p>比較的複雑な処理</p>\n<ul>\n<li>インクリメンタルサーチなどに伴い、非同期的な複数の値の取得、処理結果を整列させる、キャンセル、キャッシュ、スロットル、デバウンス、およびそれらの組合せ</li>\n</ul>\n</li>\n<li>独立性の高いコンポーネント群としてアプリケーションを構成する。 利点3で示した利点により、アプリケーションをサブシステムとして(おそらくNPMとして)分離分割する戦略に貢献することができます。</li>\n</ul>\n<h1>3D化してみよう</h1>\n<p>「ReduxおよびRedux-Sagaを使用することで、ビューとロジック・状態が完全分離できる」というのが本記事の主張です。その証明として、Sagaによるタスク定義とredux部分に1行たりとも変更を加えず、ビューだけを<a href=\"https://facebook.github.io/react-vr/\">ReactVR</a>に置き変えてみます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/eb1c4580-1536-c97b-4fdf-176d005d3e5f.gif\" alt=\"tetrominovr.mov.gif\"></p>\n<p>いともたやすくVRゲーム化できました<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>。<a href=\"https://uehaj.github.io/rect-vr-samples/TetrominoGame0/index.html\">こちらからゲームをプレイ</a>できます。カードボードなどVRゴーグルがあれば没入できるはずです。ソースコードは<a href=\"https://github.com/uehaj/rect-vr-samples/tree/master/TetrominoGame\">こちら</a>から。</p>\n<h1>まとめ</h1>\n<ul>\n<li>Redux-SagaはReduxのキラーアプリケーション。このためだけにReduxを使うということもあり。</li>\n<li>速度もこのぐらいなら十分だった。</li>\n<li>ビュー・ロジック間、ロジック間の疎結合性が特によいところ。</li>\n<li>「思いっきり命令型」だと? わーっわーっわーっ。聞こえない聞こえない(耳を塞いで)</li>\n<li>requestAnimationFrameをSagaから実行してTIME_TICKアクションを発行してますが、副作用なので本当はモックするとかせんといかん</li>\n</ul>\n<h1>おまけ</h1>\n<p>去年のRedux Advent Calenderで「<a href=\"https://qiita.com/kuy/items/fd4ae1e3e3b34f934756\">Obelisk.jsとReduxで3Dテトリス「Oberis」を作ってみた\n</a>」という記事があることに気づきました。3Dまでまるかぶりや。普遍性があるということで。</p>\n<h1>参考、ReactVRの記事</h1>\n<ul>\n<li><a href=\"https://www.ntt-tx.co.jp/column/dojo_review_blog/20170511/\">VRコンテンツをWebアプリのように開発するReact VR登場、その1【がっつりReact!シリーズ 第1回】\n</a></li>\n<li><a href=\"https://www.ntt-tx.co.jp/column/dojo_review_blog/20170929/\">React VRで太陽系を創ろう、3次元モデリングとアニメーションの基礎(前編)【がっつりReact!シリーズ 第2回】\n</a></li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-11\">\n<p>ここで言う「ビュー」はReactコンポーネントを組合せて作られたビュー全体です。コールバック関数をpropsで外部から供給すれば、そのコンポーネントはロジックから独立になりますが、それはpropsを供給する側のコンポーネントに責任が移動したにすぎません。</p>\n<a href=\"#fnref-11\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-1\">\n<p>redux-promise<del>~やredux-observable(redux-observableでは同様にアクションを監視できるので削除。)</del>~でも同じと思うが良く知らないので自信なし。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>元のアーキテクチャではシステムアクションはビューが発行しSagaでは発行しない。しかしたとえばrequestAnimatonFrameなどSagaで管理した方がやりやすいものがあり、また「タスク間の疎結合」の実現のためにも有用なので、システムアクションはSagaでも発行するようにした。</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>もちろん直接fork作用でタスクをバックグラウンド起動したりするとこの疎結合性は失なわれる。</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>react-routerの組込みなど未完成です。</p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"January 01, 1970","path":"/eaa039a7ce44d5969f06","title":"Redux-Sagaでテトリス風ゲームを実装して学んだこと","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}