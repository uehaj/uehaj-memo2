{"componentChunkName":"component---src-templates-blog-template-js","path":"/48cb682cc3441f1066a3","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p><a href=\"http://qiita.com/Nabetani/items/0597bd3af481e5834ae1\">第14回 オフラインリアルタイムどう書く</a>の参考問題「<a href=\"http://nabetani.sakura.ne.jp/hena/ord14linedung/\">眠れるモンスターを狩る</a>」を、Haskellで解きました。Stateモナドを使ってみたけど苦労のわりには…。</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell:monster.hs\"><pre class=\"language-haskell:monster.hs\"><code class=\"language-haskell:monster.hs\">-- http://nabetani.sakura.ne.jp/hena/ord14linedung/\nimport Control.Monad\nimport Control.Monad.State\n    \ndata Monster = B|D|F|H|J|L deriving (Eq, Show)\ndata Arm = A|C|E|G|I|K deriving (Eq, Show)\n\nremoveOne e xs\n    | after == [] = before\n    | otherwise = before ++ tail(after)\n    where\n      before = takeWhile (\\t-&gt; t /= e) xs\n      after = dropWhile (\\t-&gt; t /= e) xs\n\nstep (ms, as, n)\n    | A `elem` as &amp;&amp; B `elem` ms = (True, (removeOne B ms, C:as, n+1))\n    | C `elem` as &amp;&amp; D `elem` ms = (True, (removeOne D ms, E:as, n+1))\n    | E `elem` as &amp;&amp; F `elem` ms = (True, (removeOne F ms, G:as, n+1))\n    | G `elem` as &amp;&amp; H `elem` ms = (True, (removeOne H ms, I:as, n+1))\n    | I `elem` as &amp;&amp; J `elem` ms = (True, (removeOne J ms, K:as, n+1))\n    | K `elem` as &amp;&amp; L `elem` ms = (True, (removeOne L ms, A:as, n+1))\n    | otherwise = (False, (ms, as, n))\n\nnext :: State ([Monster],[Arm],Int) Bool\nnext = state $ \\(ms, as, n) -&gt; step (ms, as, n)\n\ntoMonster :: [Monster] -&gt; Char -&gt; [Monster]\ntoMonster xs ch = case ch of\n                    &#39;B&#39; -&gt; B:xs\n                    &#39;D&#39; -&gt; D:xs\n                    &#39;F&#39; -&gt; F:xs\n                    &#39;H&#39; -&gt; H:xs\n                    &#39;J&#39; -&gt; J:xs\n                    &#39;L&#39; -&gt; L:xs\n                    _ -&gt; xs\n\ntoArm :: [Arm] -&gt; Char -&gt; [Arm]\ntoArm xs ch = case ch of\n                &#39;a&#39; -&gt; A:xs\n                &#39;c&#39; -&gt; C:xs\n                &#39;e&#39; -&gt; E:xs\n                &#39;g&#39; -&gt; G:xs\n                &#39;i&#39; -&gt; I:xs\n                &#39;k&#39; -&gt; K:xs\n                _ -&gt; xs\n\ntoState :: [Char] -&gt; ([Monster], [Arm], Int)\ntoState str = (foldl (toMonster) [] str, foldl (toArm) [] str, 0)\n\nsolve :: State ([Monster], [Arm], Int) ()\nsolve = do\n  result &lt;- next\n  if (result == False) then return () else solve\n\nsolve&#39; :: [Char] -&gt; ([Monster], [Arm], Int)\nsolve&#39; str = do\n  execState solve (toState str)\n   \ntest :: [Char] -&gt; String -&gt; Bool\ntest str expected = do\n  let (_, _, n) = solve&#39; str\n  n == read expected\n\nmain :: IO ()\nmain = do\n  print $ test &quot;gLDLBgBgHDaD&quot; &quot;6&quot; {-0-}\n  print $ test &quot;DBcDLaLgDBH&quot; &quot;6&quot; {-1-}\n  print $ test &quot;JJca&quot; &quot;0&quot; {-2-}\n  print $ test &quot;FJDLBH&quot; &quot;0&quot; {-3-}\n  print $ test &quot;HJBLFDg&quot; &quot;6&quot; {-4-}\n  print $ test &quot;HBaDLFJ&quot; &quot;6&quot; {-5-}\n  print $ test &quot;DJaHLB&quot; &quot;2&quot; {-6-}\n  print $ test &quot;gDLHJF&quot; &quot;3&quot; {-7-}\n  print $ test &quot;cJFgLHD&quot; &quot;5&quot; {-8-}\n  print $ test &quot;FFBJaJJ&quot; &quot;1&quot; {-9-}\n  print $ test &quot;FJeJFBJ&quot; &quot;2&quot; {-10-}\n  print $ test &quot;iJFFJJB&quot; &quot;3&quot; {-11-}\n  print $ test &quot;JBJiLFJF&quot; &quot;5&quot; {-12-}\n  print $ test &quot;JDiFLFBJJ&quot; &quot;8&quot; {-13-}\n  print $ test &quot;BDFDFFDFFLLFFJFDBFDFFFFDDFaDBFFB&quot; &quot;28&quot; {-14-}\n  print $ test &quot;DDFBFcBDFFFFFFLBFDFFBFLFDFDJDFDF&quot; &quot;24&quot; {-15-}\n  print $ test &quot;FDLBFDDBFFFeFFFFFDFBLDDFDDFBFFJF&quot; &quot;16&quot; {-16-}\n  print $ test &quot;FDBFFLFDFFDBBDFFBJDLFgDFFFDFFDFF&quot; &quot;0&quot; {-17-}\n  print $ test &quot;FDiFLDFFFFBDDJDDBFBFDFFFBFFDFLFF&quot; &quot;31&quot; {-18-}\n  print $ test &quot;FDFDJBLBLBFFDDFFFDFFFFFDDFBkFDFF&quot; &quot;30&quot; {-19-}\n  print $ test &quot;HBkFFFFHBLH&quot; &quot;3&quot; {-20-}\n  print $ test &quot;FBHHFFFHLaB&quot; &quot;2&quot; {-21-}\n  print $ test &quot;LFHFBBcHFHF&quot; &quot;0&quot; {-22-}\n  print $ test &quot;LFBHFFeFHBH&quot; &quot;7&quot; {-23-}\n  print $ test &quot;LgFHHHBFBFF&quot; &quot;3&quot; {-24-}\n  print $ test &quot;FFiFHBHLBFH&quot; &quot;0&quot; {-25-}\n  print $ test &quot;BFHHFFHBeFLk&quot; &quot;10&quot; {-26-}\n  print $ test &quot;FHFaBBHFHLFg&quot; &quot;5&quot; {-27-}\n  print $ test &quot;FFgacaFg&quot; &quot;0&quot; {-28-}\n  print $ test &quot;JHDaDcBJiiHccBHDBDH&quot; &quot;9&quot; {-29-}\n  print $ test &quot;FHJJLckFckFJHDFF&quot; &quot;12&quot; {-30-}\n  print $ test &quot;DeDHJHDFHJBLHDLLDHJLBDD&quot; &quot;22&quot; {-31-}\n  print $ test &quot;gJLLLJgJgJLJL&quot; &quot;0&quot; {-32-}\n  print $ test &quot;DaaaDDD&quot; &quot;0&quot; {-33-}\n  print $ test &quot;HFeJFHiBiiBJeJBBFFB&quot; &quot;9&quot; {-34-}\n  print $ test &quot;FJFFJDBHBHaLJBHJHDLHkLLLFFFgJgHJLHkJkB&quot; &quot;32&quot; {-35-}\n  print $ test &quot;giFLBiBJLLJgHBFJigJJJBLHFLDLL&quot; &quot;23&quot; {-36-}\n  print $ test &quot;cgkLJcLJJJJgJc&quot; &quot;2&quot; {-37-}\n  print $ test &quot;LDFHJHcFBDBLJBLFLcFJcDFBL&quot; &quot;22&quot; {-38-}\n  print $ test &quot;JJHHHkHJkHLJk&quot; &quot;1&quot; {-39-}\n  print $ test &quot;kHHBBaBgHagHgaHBBB&quot; &quot;11&quot; {-40-}\n  print $ test &quot;HDBFFDHHHDFLDcHHLFDcJD&quot; &quot;20&quot; {-41-}\n  print $ test &quot;HFFFHeFFee&quot; &quot;7&quot; {-42-}\n  print $ test &quot;gLLDHgDLgFL&quot; &quot;1&quot; {-43-}\n  print $ test &quot;JJJBBaBBHBBHaLBHJ&quot; &quot;7&quot; {-44-}\n  print $ test &quot;FBFBgJBDBDgF&quot; &quot;0&quot; {-45-}\n  print $ test &quot;LLLLakakLakLL&quot; &quot;7&quot; {-46-}\n  print $ test &quot;HeJHeJe&quot; &quot;0&quot; {-47-}\n  print $ test &quot;LDFLBLLeBLDBBFFBLFBB&quot; &quot;4&quot; {-48-}</code></pre></div>","frontmatter":{"date":"January 01, 1970","path":"/48cb682cc3441f1066a3","title":"第14回オフラインリアルタイムどう書くの参考問題をHaskellで解く","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}