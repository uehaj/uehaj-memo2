{"componentChunkName":"component---src-templates-blog-template-js","path":"/80056c1ff10c63dc7810","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<h1>追記(2017/05/2)</h1>\n<p>redux-sagaでの非同期バージョンの紹介とリンクを追記。</p>\n<h1>追記(2017/2/23修正)</h1>\n<p><font color=\"red\"><a href=\"http://qiita.com/hiruberuto/items/39e4126f470d8b84b291#%E8%BF%BD%E8%A8%98%EF%BC%93%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF%E3%83%BC%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%82%92%E9%A0%82%E3%81%84%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%99%E3%81%8C%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AB%E8%AA%A4%E3%82%8A%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99\">元記事の追記3</a>にて言及を頂いたように、</font>以下の「見易い版」コードは元コードが実現していた機能が抜けおちているという誤りがあります。遅くなりましたが、お詫びの上修正させていただきます。\n修正内容は以下の「<a href=\"http://qiita.com/uehaj/items/80056c1ff10c63dc7810#refresh%E3%83%9C%E3%82%BF%E3%83%B3%E6%8A%BC%E4%B8%8B%E3%81%A7%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E5%80%99%E8%A3%9C%E3%82%92%E6%B6%88%E5%8E%BB2017223%E8%BF%BD%E8%A8%98\">refreshボタン押下ですべての候補を消去</a>」の項目に追記しました。</p>\n<p>上記追記の趣旨として、リアクティブプログラミングはそれほど判り難いのだ、というご指摘になっていますが、返す言葉もございません。</p>\n<h1>はじめに</h1>\n<p>先日「<a href=\"http://qiita.com/hiruberuto/items/39e4126f470d8b84b291\">リアクティブプログラミングとは何だったか</a>」という記事を目にしまして、内容はたいへん興味深かったのですが、以下の記述がありました。</p>\n<blockquote>\n<p>『宣言的』といえそうなのはわかりますし、パラダイムとして従来のコードとは一線を画すものであることは確かですが、どう贔屓目にみてもひたすら読みづらいとしか感じられません。ここでもう一度、先に示したモナド版のほうを見て比較してみます。</p>\n</blockquote>\n<p>比較しているのは、<a href=\"http://jsfiddle.net/staltz/8jFJH/48/\">RxJS版</a>と、<a href=\"https://gist.github.com/aratama/fa9fd5eca5573fc2e6dd\">PurescriptのAffモナド版</a>なのですが、わたしはいずれについても詳しい知識はありませんが、ReactiveXのObservableは、私の理解では<strong>「ストリームモナド」</strong>であり、Affモナドも(名前から判断する限り)どっちもモナドなわけで、基本的な記述でなぜそのような差が出るのかが良くわかりませんでした。 </p>\n<p>ということで、調べてみました。</p>\n<h1>TL;DR</h1>\n<p>リアクティブプログラミングが読み難いかどうかは、書き方によるが、簡単なケースでは言うほど読みにくい、というわけでもない(個人の感想です)。また読者の背景知識にもよる。</p>\n<h1>「ひたすら読み難い」と言われているコード</h1>\n<p>先の記事中で比較対象は<a href=\"http://ninjinkun.hatenablog.com/entry/introrxja\">「あなたが求めていたリアクティブプログラミング入門」</a><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\">(original)</a>に示されていた<a href=\"https://github.com/Reactive-Extensions/RxJS\">RxJS</a>のコード(<a href=\"http://jsfiddle.net/staltz/8jFJH/48/\">全体はこちら</a>)です。</p>\n<p>一部引用するとこんな感じ。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> refreshClickStream <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>refreshButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> close1ClickStream <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>closeButton1<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> close2ClickStream <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>closeButton2<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> close3ClickStream <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>closeButton3<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> requestStream <span class=\"token operator\">=</span> refreshClickStream<span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startup click'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> randomOffset <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'https://api.github.com/users?since='</span> <span class=\"token operator\">+</span> randomOffset<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> responseStream <span class=\"token operator\">=</span> requestStream\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">requestUrl</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromPromise</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>requestUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSuggestionStream</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">closeClickStream</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> closeClickStream<span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startup click'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>responseStream<span class=\"token punctuation\">,</span>             \n            <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">click<span class=\"token punctuation\">,</span> listUsers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> listUsers<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>listUsers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>\n            refreshClickStream<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> \n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> suggestion1Stream <span class=\"token operator\">=</span> <span class=\"token function\">createSuggestionStream</span><span class=\"token punctuation\">(</span>close1ClickStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> suggestion2Stream <span class=\"token operator\">=</span> <span class=\"token function\">createSuggestionStream</span><span class=\"token punctuation\">(</span>close2ClickStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> suggestion3Stream <span class=\"token operator\">=</span> <span class=\"token function\">createSuggestionStream</span><span class=\"token punctuation\">(</span>close3ClickStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n ：\nsuggestion1Stream<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestedUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">renderSuggestion</span><span class=\"token punctuation\">(</span>suggestedUser<span class=\"token punctuation\">,</span> <span class=\"token string\">'.suggestion1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsuggestion2Stream<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestedUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">renderSuggestion</span><span class=\"token punctuation\">(</span>suggestedUser<span class=\"token punctuation\">,</span> <span class=\"token string\">'.suggestion2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsuggestion3Stream<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestedUser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">renderSuggestion</span><span class=\"token punctuation\">(</span>suggestedUser<span class=\"token punctuation\">,</span> <span class=\"token string\">'.suggestion3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>なるほどなるほど。確かに確かに。</p>\n<h1>なぜ読み難いのか</h1>\n<h2>変数の多用</h2>\n<p>一見してわかるのは、ストリーム(=Observable)を保持するための変数を多用しているということです。この理由はおそらく、本文中での説明時の参照のしやすさ、特に図表で説明するためではないかと思いました。たとえば、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    requestStream: --r---------------&gt;\n   responseStream: ------R-----------&gt;\nclose1ClickStream: ------------c-----&gt;\nsuggestion1Stream: ------s-----s-----&gt;</code></pre></div>\n<p>上記の左の桁にストリームを特定するための変数名を書きたかった、ということです。</p>\n<p>結果として読む流れが上に行ったり下に行ったりしてしまいます。ただこれは使用箇所で値を展開するようにすれば改善されるでしょう。</p>\n<h2>不要な処理(2017/2/23訂正)</h2>\n<p><del>いくつか不要な処理が混入していることに気付きました。具体的にはmergeの呼び出しや、startwithを2回呼び出していることなどです。ステップバイステップで改良しつつ説明していくときに、古いステップで必要だったが、処理を追加することで不要になったものを削除しわすれてる、って気がします。</del></p>\n<p><del>この結果、 refreshClickStreamが2箇所で使用され、最後に合流していくように見え、なんだこりゃ、と思えるようになっていました。でもそれで動くっていうのもある意味すごい。</del></p>\n<p>当初、refreshStreamのmergeによる合流は不要な処理と思いましたが、後述のように重要な仕様を実現するためのもので不要ではありませんでした。startwithの2回の呼び出しのうち1回は不要な処理だと思っています。</p>\n<h2>ES2015の不使用</h2>\n<p>アロー関数をつかってないので煩雑に見えます。枝葉ですけどね。</p>\n<h1>書き直してみた</h1>\n<p>上記を中心に修正してみると、先ほど引用した部分に対応する部分は以下のようになりました。(全体および詳しい説明は<a href=\"http://jsdo.it/uehaj/rxjs1\">こちら</a>。)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// お奨めユーザ一覧を取得する非同期通信の発行結果のプロミスをストリームで包んで返す。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNewUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> randomOffset <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> requestUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.github.com/users?since='</span> <span class=\"token operator\">+</span> randomOffset\n    <span class=\"token keyword\">return</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromPromise</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>requestUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// closeボタンにイベントストリームを設定するぜ!</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>closeButton1<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>closeButton2<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>closeButton3<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>closeButton<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n             Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>closeButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startup click'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>\n                 Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>refreshButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startup click'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getNewUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> listUsers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> listUsers<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>listUsers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestedUser</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">renderSuggestion</span><span class=\"token punctuation\">(</span>suggestedUser<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>refreshボタン押下ですべての候補を消去(2017/2/23追記)</h2>\n<p>当初、本記事は、上記まででしたが、重要な仕様である「refreshボタン押下の瞬間に一旦すべての候補が消去される」が実装されていませんでした。私の理解不足によるもので申し訳なく思います。該当機能を実装した版を以下にしめします。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// お奨めユーザ一覧を取得する非同期通信の発行結果のプロミスをストリームで包んで返す。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNewUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> randomOffset <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> requestUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.github.com/users?since='</span> <span class=\"token operator\">+</span> randomOffset\n    <span class=\"token keyword\">return</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromPromise</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>requestUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> refreshClickStream <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>refreshButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//追加</span>\n\n<span class=\"token comment\">// closeボタンにイベントストリームを設定するぜ!</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>closeButton1<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>closeButton2<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>closeButton3<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>closeButton<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n             Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>closeButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startup click'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>\n                 refreshClickStream <span class=\"token comment\">// 変更</span>\n                     <span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'startup click'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getNewUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> listUsers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> listUsers<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>listUsers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>refreshClickStream<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 追加。refreshボタンが押されたらsuggestedUser==nullという出力を折り込む</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestedUser</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">renderSuggestion</span><span class=\"token punctuation\">(</span>suggestedUser<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>修正版の全体は<a href=\"http://jsdo.it/uehaj/45A9\">こちら</a>。</p>\n<h2>combineLatestの使用</h2>\n<p>上記では特に<a href=\"http://reactivex.io/documentation/operators/combinelatest.html\">combineLatest</a>のところが難解に感じられるかもしれませんので説明します。このサンプルコードでは、個々の推奨ユーザに付随するcloseボタンの押下ではAJAXのXHRリクエストが発行されずに、最後に実行したrefreshで取得した推奨ユーザリストの値を再利用するようにしています。</p>\n<p>combineLatestは2つのストリームに関数を適用したストリームを返す、Haskellのリスト処理で言えば、「zipWith」に対応するものです。ただしストリームは非同期で離散的な値であるので、イベント生成タイミングとzipするべきペアは自明ではありません。combineLatestは「いずれかのストリームのイベント発生のタイミングで、それぞれのストリームの直近で最後の値」に対して、指定した関数を適用し、その結果から成るストリームを返します。</p>\n<p>このコードでは、refreshボタンのストリームから「推奨ユーザリストのストリーム」を生成させ、combineLatestで組合せることによって、close時に利用できる「refreshで最後に取得した推奨ユーザリスト」のイベントストリームを生成します。</p>\n<p>もちろん上記のコードはcombineLatestの意味がわからないと理解できませんが、ReactiveXの中核価値の一つは、ストリームに対する高機能なオペレータが数多く取り揃えられていることであり、それらを適切に使い分けて活用するのがRxのキモの一つだと思います。興味を引くための例示コードとしては適切だと言えましょう。</p>\n<p>実際、<a href=\"http://ninjinkun.hatenablog.com/entry/introrxja\">「あなたが求めていたリアクティブプログラミング入門」</a>でも(太字は引用者)、こんな風に書かれています。</p>\n<blockquote>\n<p>これは1つをクリックしただけなのに、クローズして全ての候補を再読み込みする。この問題を解決する方法は色々あるが、<strong>面白さを保つために</strong>も、先ほどのレスポンスを再利用して解決してみる。APIレスポンスのページサイズは100人のユーザー分あるが、我々は3人分しか使っていない。そこにはまだ豊富な新しいデータがある。追加のリクエストをする必要は無い</p>\n</blockquote>\n<h2>キャッシュしないバージョン</h2>\n<p>Affモナド版では、推奨ユーザ一覧の<del>キャッシュ処理を(おそらく)していません。「同機能なものに対するコード比較」をしてみるのも意味があるかと思うので、</del>(訂正、されておりました。大変もうしわけありません)。</p>\n<p>RxJSでキャッシュをしないバージョンも書いてみました(全体は<a href=\"http://jsdo.it/uehaj/rxjs2\">こちら</a>)。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// closeボタンにイベントストリームを設定するぜ!</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>closeButton1<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>closeButton2<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span>closeButton3<span class=\"token punctuation\">,</span> <span class=\"token string\">\".suggestion3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>closeButton<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n             Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>closeButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>refreshButton<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getNewUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listUsers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">renderSuggestion</span><span class=\"token punctuation\">(</span>listUsers<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>listUsers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上記ではcombineLatestは使用せずに、単にmergeをしています。「refreshを押したかあるいはその推奨ユーザに対するcloseを押したか」のいずれかで都度推奨ユーザ一覧の取得処理が行なわれます。</p>\n<p>ずいぶんと分かりやすくなった気がしますがいかがしょうか。</p>\n<h1>読み難いのか?</h1>\n<p>ここまで見てきたように、ReactiveX/RxJSのコードを読むにはストリームオペレータに関する知識を必要とします。でもそれは、例えばHaskellのList処理で、foldlとかscanl,zipWithなどの標準ライブラリ関数を使ったコードに対して、それらの関数が何をするかを知らないと理解が難しいと感じるのと同様です。</p>\n<p>逆にそれらに習熟したならば、短く書け、むしろ読みやすいと感じる場合も多々あるでしょう。</p>\n<p>ちなみに、このコードはRxの真価を発揮するのにはたぶん単純すぎます。複数の関連し合うイベントソースに対する処理記述において、モジュラリティとコンポーザビリティが得られることが、真にユニークな、ほかの方法では得られないリアクティブプログラミングの利点です。しかしだからといって、単純なケースが書きにくいわけではないと思います。例えば非同期モナド(Promise想定)などと少なくとも同程度ではないでしょうか。</p>\n<p>もちろん、ストリームが何個もあって、相互に絡みあう結合・分岐が複雑になってくると、わかりにくくなって、図表とかが必要になってくるでしょう。かと言ってそれをストリームを使わないで書いた場合、その何倍もツラいコードになる気がします。</p>\n<h2>んでやっぱり読み難いのか?(2017/2/23追記)</h2>\n<p>やってしまってもう恥かしいので、読者の判断におまかせしたいと思います。今後、redux-sagaなどで非同期バージョンを書いて比較してみようと思います。</p>\n<h1>redux-sagaでの非同期バージョン(2017/5/2追記)</h1>\n<p><a href=\"https://github.com/uehaj/followbox-redux-saga/blob/master/sagas.js\">redux-sagaでの非同期バージョン</a>を書いた。元の仕様に加えて、リフレッシュ・リムーブについてモーダルダイアログでの確認も追加している(sagaらしくて面白いので)。<a href=\"https://followbox-redux-saga-vevubwrmcf.now.sh/\">デモ</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// show modal dialog and get user response(Ok/Cancel) synchronously</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">askYesNo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Are you sure?'</span><span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> answer <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    ok<span class=\"token operator\">:</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">UI_MODAL_OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    cancel<span class=\"token operator\">:</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">UI_MODAL_CANCEL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> show<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// remove and get new follower</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">users<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make sure to remove</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>verify <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token function\">askYesNo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Delete and refresh <span class=\"token keyword\">this</span> follower<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ok\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// get one random user from the users list</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setFollower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> idx<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// refresh all folllowers</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// make sure to refresh</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>verify <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">yield</span> <span class=\"token function\">askYesNo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Refresh all followers<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ok\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// remove all followers on screen immediately</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setFollower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> idx<span class=\"token operator\">:</span> i<span class=\"token punctuation\">,</span> user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> avatar_url<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get user list pool (reuse following remove calls)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>getNewUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span><span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// remove and refresh all followers</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>remove<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">,</span> Actions<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> idx<span class=\"token operator\">:</span> i<span class=\"token punctuation\">,</span> verify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// wait until remove link[x] clicks</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">UI_REMOVE</span><span class=\"token punctuation\">,</span> remove<span class=\"token punctuation\">,</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// single entry point to start all Sagas at once</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span>Types<span class=\"token punctuation\">.</span><span class=\"token constant\">UI_REFRESH</span><span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>その他</h1>\n<ul>\n<li>元記事の「あなたが求めていたリアクティブプログラミング入門」のサンプルコードだけを読むと、結構ひどいという印象になるのはしょうがない気がする。かといって、稠密なプロフェッショナルコードが入門記事のサンプルとしてふさわしいか、というと違う気もする。難しいところです。</li>\n<li>ReactiveXの利点は他にもある。バックプレッシャーつきバッファリング、他言語での同アーキテクチャ共有などなど。</li>\n<li>私はReactiveX/RxJSの知識はあんまりありません(この記事を書くために調べただけで本格的に使ったことはない)ので、不足や間違いなどありましたらご指摘ください。</li>\n<li>この記事では流れでReactiveX/RxJSをもって「リアクティブプログラミングの代表」みたいな話にしてしまってますが、一例です。本当はそれどころかReactiveX/RxJSが厳密な意味でリアクティブプログラミングにあてはまるかは不明です(参考→<a href=\"http://postd.cc/what-is-functional-reactive-programming/\">FRP</a>。わけわかんねー。)。この記事では、少なくとも「広義のリアクティブプログラミング」にはあてはまるものだとみなしています。</li>\n<li>flatMapをネストさせていくときに、JSではdo記法がないので煩雑になるかと思いましたが(当初それが原因かと当て推量していた)、今回のコードではそんな複雑なものではありませんでした。</li>\n</ul>\n<h1>おわりに</h1>\n<p>元記事「リアクティブプログラミングとは何だったか」をかかれた、hiruberutoさまにおかれましては、上記調査のきっかけを作ってくださったことを感謝いたします。ありがとうございました。</p>","frontmatter":{"date":"January 01, 1970","path":"/80056c1ff10c63dc7810","title":"「リアクティブプログラミングが読み難い」というのは本当なのか?","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}