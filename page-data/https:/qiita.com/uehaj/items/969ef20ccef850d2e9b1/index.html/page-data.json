{"componentChunkName":"component---src-templates-blog-template-js","path":"/https://qiita.com/uehaj/items/969ef20ccef850d2e9b1/index.html","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p>Material UIでのスタイル指定方法を説明します。Material UIのスタイルシステムの実体はJSSです。themeについては言及しません。もっと基礎的なところだけです。</p>\n<h1>classNameで即値指定</h1>\n<p>HTMLで言うclass=の指定。Material UI的には何もしない。BEMやscssでもなんでもいいのですが、外部スタイルシートを定義してあてがっていくパターン。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hoge</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hoge fuga<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<h1>styleで指定</h1>\n<p>styleプロパティの指定。Material UI的には何もしない。オブジェクトがdomのstyle属性に変換されて付けられる、Reactの仕組み。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span>Hoge style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>fontSize<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">:</span> <span class=\"token string\">'1rem'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>DOM上は、要素に直接紐付いたスタイル指定(devtool上、element.styleで表示される)となる。疑似要素は原理的に指定不可。</p>\n<h1>StyledComponent💅で指定。</h1>\n<p><a href=\"https://material-ui.com/styles/api/#styled-component-styles-options-component\">こちら</a>を参照。本資料では説明を割愛する。</p>\n<h1>JSSのスタイルシートオブジェクトで指定</h1>\n<p>Material UIがかかわるのはここから。JSSは基本的にDOMのインラインスタイル属性ではなく、クラス名による指定の仕組みである。</p>\n<h2>大きな流れ</h2>\n<p>以下のような流れとなる。</p>\n<ol>\n<li>スタイルシートの元になる「元のスタイルシートオブジェクト」をJSで作る<code class=\"language-text\">const styles = {\nroot: {\nbackgroundColor: &#39;red&#39;,\n},\n};</code></li>\n<li>「元のスタイルシートオブジェクト」を元に、Material UIが準備しているHoCやhooksを使って、以下を生成する。</li>\n<li>\n<p>「元のスタイルシートオブジェクト」のプロパティ名(「論理クラス名」とでも呼ぶとする)と、コンポーネントローカルにリネームされた実際に生成される「クラス名」(「物理クラス名」とでも呼ぶとする)の対応表。こんなやつ:\n<code class=\"language-text\">{&quot;tabBar&quot;:&quot;TabBar-tabBar-284&quot;,&quot;selectedTab&quot;:&quot;TabBar-selectedTab-285&quot;}</code><br/>\"tabBar\"が論理クラス名、\"TabBar-tabBar-284\"が物理クラス名と本文書では呼ぶとする。物理クラス名をプログラマが意識することは(デバッグ時を除き)基本的にはない。</p>\n<ul>\n<li>この物理クラス名でのCSSスタイル定義が、背後で&#x3C;head>に挿入される(プログラマは意識しないでよい)。</li>\n</ul>\n</li>\n<li>\n<p>「論理クラス名→物理クラス名の対応表」をMaterial UIが提供するReactコンポーネントにおいて以下のいずれかの方法で利用する</p>\n<ul>\n<li>対応表から物理クラス名を取得して「classNames」propsで指定する。</li>\n<li>対応表から物理クラス名を取得して「classes」propsで指定する。</li>\n</ul>\n</li>\n</ol>\n<h2>「元のスタイルシートオブジェクト」の作りかた</h2>\n<h3>単なるJSオブジェクトとして「スタイルシートオブジェクト」を作る</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>もしくは</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token function\">createStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>両者の意味は同じである。後者ではTypeScriptの型エラーを黙らすことができる。</p>\n<h2>themeを引数とする関数として「スタイルシートオブジェクト」を作る</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">styles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">theme<span class=\"token operator\">:</span> Theme</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>もしくは</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">styles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">theme<span class=\"token operator\">:</span> Theme</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">createStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>両者の意味は同じである。後者ではTypeScriptの型エラーを黙らすことができる。</p>\n<p>ここでは、Reactのインラインstyle属性のようにJavaScriptオブジェクトを用いるが、rootの階層が入っていることが異なる。この階層の名前は、(実CSSクラス名を隠蔽した)、ローカルなCSSクラス名と思ってよい。</p>\n<p>CSSクラスなので疑似クラスも指定できる。たとえば、以下のように:hover疑似クラスが指定できる。(JSSの機能)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> styles<span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>theme<span class=\"token operator\">:</span> Theme<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">StyleRules</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">createStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    button<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      margin<span class=\"token operator\">:</span> <span class=\"token string\">'0.3rem'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'&amp;:hover'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> transform<span class=\"token operator\">:</span> <span class=\"token string\">'scale(1.1)'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2>「元のスタイルシートオブジェクト」から「クラス名の対応表」を入手する</h2>\n<h3>React Hooks系で</h3>\n<p><a href=\"https://material-ui.com/styles/api/#makestyles-styles-options-hook\">こちらから</a>引用だが、以下のように「makeStyles」の引数に「元のスタイルシートオブジェクト」を渡すと、「クラス名の対応表」を取得できるフック関数を入手することができる。そのフック関数の呼び出し結果をclasses変数に取得している。(createStylesは使用していない。)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> makeStyles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@material-ui/core/styles'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> useStyles <span class=\"token operator\">=</span> <span class=\"token function\">makeStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">color</span><span class=\"token operator\">:</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">useStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>HoC系で</h3>\n<p>HoCである<a href=\"https://material-ui.com/styles/api/#withstyles-styles-options-higher-order-component\">withStyles</a>を使う。こちらも引用だが以下となる。意味はHooks系と同じだが、「元のスタイルシートオブジェクト」をwithStylesの入力として与え、「クラス名の対応表」がprops.classesに得られるようなコンポーネントを生成している。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withStyles <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@material-ui/core/styles'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>classes<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withStyles</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>取得した「クラス名の対応表」の使いかた</h2>\n<p>「クラス名の対応表」は、入手方法としてHooksでもHoCで得ることができるが、同じものである。上記サンプルでは、入手した「クラス名の対応表」はclassesという名前のprops(props.classes)もしくは変数classesに格納している。</p>\n<p>「クラス名の対応表」には2つの使いかたがある。</p>\n<h2>classNameに与える</h2>\n<p>サンプルにもあるが、</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>classes<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>のように指定する。複数あれば</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">,</span>classes<span class=\"token punctuation\">.</span>hoge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>のようにNPMモジュールclassnamesを使うのがよいだろう。classnamesはクラス名を結合させているだけである。(<a href=\"https://qiita.com/taqm/items/c38855d8158cdd9d5a3e\">clsx</a>というのもあり効率がよいらしい)。</p>\n<h2>classesで指定</h2>\n<p>最後になったが、これがJSSの本領である。Material UIのコンポーネントにはCSS APIというものが定義されており、それを使ってカスタマイズすることができる。\nたとえば、<a href=\"https://material-ui.com/api/tabs/\">Tabsコンポーネントには以下のようにかかれている</a>。</p>\n<p><strong><em>CSS</em></strong></p>\n<ul>\n<li>Style sheet name: MuiTab.</li>\n<li>Style sheet details:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Rule name</th>\n<th align=\"left\">Global class</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">root</td>\n<td align=\"left\">.MuiTab-root</td>\n<td align=\"left\">Styles applied to the root element.</td>\n</tr>\n<tr>\n<td align=\"left\">labelIcon</td>\n<td align=\"left\">.MuiTab-labelIcon</td>\n<td align=\"left\">Styles applied to the root element if both icon and label are provided.</td>\n</tr>\n<tr>\n<td align=\"left\">textColorInherit</td>\n<td align=\"left\">.MuiTab-textColorInherit</td>\n<td align=\"left\">Styles applied to the root element if the parent Tabs has textColor=\"inherit\".</td>\n</tr>\n<tr>\n<td align=\"left\">textColorPrimary</td>\n<td align=\"left\">.MuiTab-textColorPrimary</td>\n<td align=\"left\">Styles applied to the root element if the parent Tabs has textColor=\"primary\".</td>\n</tr>\n<tr>\n<td align=\"left\">textColorSecondary</td>\n<td align=\"left\">.MuiTab-textColorSecondary</td>\n<td align=\"left\">Styles applied to the root element if the parent Tabs has textColor=\"secondary\".</td>\n</tr>\n<tr>\n<td align=\"left\"><font color=\"red\">selected</font></td>\n<td align=\"left\">.Mui-selected</td>\n<td align=\"left\">Pseudo-class applied to the root element if selected={true} (controlled by the Tabs component).</td>\n</tr>\n</tbody>\n</table>\n<p>これらを必要に応じてオーバーライド定義することができる。赤字\"selected\"は後述の説明で例として使用するCSS APIのキー名である。このスタイルをオーバーライドする方法は3つある。</p>\n<ul>\n<li>With a rule name of the classes object prop.(classes propsのルール名)</li>\n<li>With a global class name. (グローバルクラス名)</li>\n<li>With a theme and an overrides property..(テーマと上書きプロパティ)</li>\n</ul>\n<p>以降では最初の「 rule name of the classes object prop.」について説明する。\nやるべきことは、classes属性に、指定したCSS API名をキー(ここではslected)とし「クラス名の対応表」をひっぱって物理クラス名を指定するのである。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">styles</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">theme<span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">createStyles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selectedTab<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#eeeeff'</span><span class=\"token punctuation\">,</span>\n      fontWeight<span class=\"token operator\">:</span> <span class=\"token string\">'bold'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">:</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tabs</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tab</span></span>\n              <span class=\"token attr-name\">classes</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> selected<span class=\"token operator\">:</span> classes<span class=\"token punctuation\">.</span>selectedTab <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n               :\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Tabs</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>するともともとMUIで定義されていたCSSに上書きされる形でCSSスタイルが定義される。</p>\n<p>MUIコンポーネントのclasses属性は、それぞれのMUIコンポーネントが内部的に持っていて使用している「元のスタイルシートオブジェクト」のカスタマイズのための「置き換え対応表」として使用される。</p>","frontmatter":{"date":"January 01, 1970","path":"/https://qiita.com/uehaj/items/969ef20ccef850d2e9b1/index.html","title":"Material UIのスタイル指定(JSS)","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}