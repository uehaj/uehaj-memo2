{"componentChunkName":"component---src-templates-blog-template-js","path":"/https://qiita.com/uehaj/items/7c07f019e05a743d1022/index.html","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<h1>2019/09/13追記</h1>\n<p><a href=\"https://medium.com/dartlang/announcing-dart-2-5-super-charged-development-328822024970\">Dart 2.5</a>で「 As of Dart 2.5, we support many more ways to define constant expressions, including the ability to use casts and the new control flow and collection spread features shipped in Dart 2.3:」とのことで以下が可能となりました。本文には反映していません。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// Example: these are now valid compile-time constants.</span>\n<span class=\"token keyword\">const</span> Object i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">as</span> int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">is</span> List<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">is</span> int<span class=\"token punctuation\">)</span> i<span class=\"token punctuation\">:</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>はじめに</h1>\n<p>Dart言語における変数定義時の修飾子には<a href=\"https://www.dartlang.org/guides/language/language-tour#final-and-const\">final、const</a>、およびstaticがある。\nfinal,const及び型を指定しないことを意味する「var」を指定することもできる。\n本記事では、これらの変数修飾子、およびconst constructorについて説明する。</p>\n<h1>final指定</h1>\n<p>finalが指定された変数は、プログラム開始後のある時点で一回だけ初期化され、初期化以降は、代入などを通じて変更されない/できないことが保証される(再代入不可)。なお、finalな変数が「指す先」のメモリ領域の内容が変更されることについての制約はない。</p>\n<h2>finalの使用例</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">  <span class=\"token keyword\">final</span> int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error(再代入不可)</span>\n  <span class=\"token keyword\">final</span> List<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK(指す先は変更可能)</span></code></pre></div>\n<h1>const指定</h1>\n<p>変数の値が「コンパイル時定数(compile-time constant)」であること、すなわち、コンパイル時に確定している値であることを示すための指定。constな変数の値はプログラムの実行開始に先立って初期化されており、プログラムの実行を通じて不変であることが保証される。const変数は再代入も不可である。つまり、finalの意味に加え、constな変数が指す先のメモリ領域の内容も変更不可であることを表す。</p>\n<h2>constの使用例</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">  <span class=\"token keyword\">const</span> int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error(再代入不可)</span>\n  <span class=\"token keyword\">const</span> List<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK ※1</span>\n  <span class=\"token keyword\">const</span> List<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK(const値)</span>\n  b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// コンパイルエラー(指す先も変更不可)</span></code></pre></div>\n<p>※1 コメント欄にてご指摘いただき修正しました。以前のDartでは配列リテラルに明示的にconstを付けないとconstなListを初期化できずコンパイルエラーだったのが、現在はコンパイルエラーにならないとのことです(むしろ付けない方が推奨)。</p>\n<h1>コンパイル時定数</h1>\n<p>const指定された変数を含み、より一般的な概念が「コンパイル時定数(compile-time constant)<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>」である。以下はコンパイル時定数として扱うことのできる要素である。const指定する変数の値の初期化値はコンパイル時定数である必要がある。</p>\n<ul>\n<li>\n<p>数値リテラル</p>\n<ul>\n<li>例: <code class=\"language-text\">1.0</code></li>\n<li>例: <code class=\"language-text\">3</code></li>\n</ul>\n</li>\n<li>\n<p>文字列リテラル</p>\n<ul>\n<li>例: <code class=\"language-text\">&quot;abc&quot;</code></li>\n</ul>\n</li>\n<li>\n<p>boolean型リテラル</p>\n<ul>\n<li>例: <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code></li>\n</ul>\n</li>\n<li>\n<p>const指定された定数</p>\n<ul>\n<li>例: <code class=\"language-text\">myConst</code></li>\n</ul>\n</li>\n<li>\n<p>null値</p>\n<ul>\n<li>例: null</li>\n</ul>\n</li>\n<li>\n<p>constなリストリテラル(型はListBase&#x26;&#x26;UnmodifiableListMixin)。当然ながら要素もコンパイル時定数である必要がある。</p>\n<ul>\n<li>例: <code class=\"language-text\">const [1,2,3]</code></li>\n</ul>\n</li>\n<li>\n<p>constなマップリテラル(型は_ImmutableMap)。当然ながら要素もコンパイル時定数である必要がある。</p>\n<ul>\n<li>例: <code class=\"language-text\">const {&quot;a&quot;:1, &quot;b&quot;:2}</code></li>\n</ul>\n</li>\n<li>\n<p>コンパイル時定数のみから成る演算式(の結果の値)</p>\n<ul>\n<li>例1: コンパイル時定数</li>\n<li>例: <code class=\"language-text\">2+3</code></li>\n<li>例: <code class=\"language-text\">&quot;abc&quot;+&quot;def&quot;</code></li>\n<li>例2: const指定された定数</li>\n<li>例： <code class=\"language-text\">myConst1 + myConst2+5</code></li>\n<li>例： <code class=\"language-text\">myConst1 &amp;&amp; myConst2</code></li>\n<li>例3</li>\n<li>例: <code class=\"language-text\">3 == 4 ? &quot;a&quot; : &quot;b&quot;</code></li>\n</ul>\n</li>\n<li>\n<p><del>コンパイル時定数の文字列テンプレート展開</del></p>\n<ul>\n<li><del>例: <code class=\"language-text\">&quot;const myConst ${myConst} is const&quot;</code></del>(訂正: 文字列テンプレートはconstにならない)</li>\n</ul>\n</li>\n<li>\n<p>const constructor(後述)の呼び出し。const constructorに与える引数(finalフィールドに設定するための値)はコンパイル時定数である必要がある。</p>\n<ul>\n<li>例： <code class=\"language-text\">const ClassWithConstantConstructor(1, &quot;abc&quot;, [1,2,3])</code></li>\n</ul>\n</li>\n<li>\n<p>関数や静的メソッドの参照</p>\n<ul>\n<li>\n<p>例:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import &#39;dart:math&#39;;\nconst f = min;</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<p>以下はコンパイル時定数にはならない。</p>\n<ul>\n<li>乱数値など呼び出す度に変化する値や式</li>\n<li>評価するために入出力の副作用を伴う式</li>\n<li>ランタイムにメモリ上にアロケートされる値(newで構築されるオブジェクトインスタンス)</li>\n<li>\n<p>値の計算に静的関数やメソッドの呼び出し結果を必要とする値</p>\n<ul>\n<li>たとえば<code class=\"language-text\">const [1,2,3].length</code></li>\n<li>たとえばリストの結合やマップの併合</li>\n<li>n回の繰り返し(たとえnがコンパイル定数であろうとも)。</li>\n</ul>\n</li>\n</ul>\n<p>コンパイル時定数の実行時モデルとしては、ROM領域もしくは「初期化された静的定数領域」に、領域内のポインタ参照構造を含めて配置されることを想定すれば良いと思われる。</p>\n<p>全体としては、残念ながら皆が期待するところのコンパイル時プログラミングの用には供せないのではないかと思う(が定かではない)。</p>\n<h2>const constructor</h2>\n<p>前項で示した<a href=\"https://www.dartlang.org/guides/language/language-tour#constant-constructors\">const constructorの呼び出し</a>は、以下のようにconst constructorが定義されたクラス定義を前提とした例である。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassWithConstantConstructor</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> int n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> String s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> List l<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function\">ClassWithConstantConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// const constructor</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>const constructorは通常のコンストラクタとは異なり、ボディを持つことができない。\n前項の例でも示したように、const constructorの呼び出しは通常のコンストラクタ呼び出しで使用するnewの代りにconstキーワードを使用する。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">const</span> <span class=\"token function\">ClassWithConstantConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><del>\u0002クラスには、const constructorと通常のconstructorの両方を定義することもできる。\nDart2ではインスタンス生成のためのキーワードnew、constが省略できるが、constの文脈ではconst constructorが、非constの文脈では通常のconstructorが呼び出される。</del>(訂正)クラスには、同一名のconst constructorと通常のconstructorの両方を定義することはできない(重複定義となり構文エラーとなる)。一方を名前付きコンストラクタにする、異なる名前の名前つきコンストラクタにするなどすれば、1つのクラスが通常のconstructorとconst constructorの両方を持つことができる。</p>\n<p>const constructorを使うことで、「コンパイル時に定まるDAG構造<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>」のリテラルを表現することができる。\nなお、構造をもったコンパイル時定数(DAG構造、リスト、マップを含め)一般に、これらの構造はinternされる。すなわち値や構造が一致していればオブジェクトインスタンスが一致していることが保証される。</p>\n<p>internされることは、コンパイル時定数がswitch-case文のcase節に利用できることに関連して重要である。</p>\n<h2>const constructorの例</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cons</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">dynamic</span> car<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> Cons cdr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>car<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cdr<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token metadata symbol\">@override</span>\n  String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n     <span class=\"token string\">\"(${this.car} . ${this.cdr == null ? \"</span>nil<span class=\"token string\">\" : this.cdr.toString()})\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> Cons list1 <span class=\"token operator\">=</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> Cons list2 <span class=\"token operator\">=</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> Cons list3 <span class=\"token operator\">=</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ((1 . (2 . nil)) . ((1 . (2 . nil)) . nil))</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ((1 . (2 . nil)) . ((1 . (2 . nil)) . nil))</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>list2 <span class=\"token operator\">==</span> list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 値が等しいのでtrueが表示される。</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">identical</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">,</span> list3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// オブジェクトが等しいのでtrueが表示される(internされている)。</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>constとfinalの違い</h1>\n<ul>\n<li>finalは<strong><em>変数の性質</em></strong>なので、「final変数に代入できない」など、代入の左辺になったときの<strong><em>変数としての扱い</em></strong>について差異が生じる。しかし、final変数の保持する<strong><em>値</em></strong>には影響を与えない。たとえば、「〜には、final変数の<strong><em>値を</em></strong>代入できない(orできる)」「〜の場合の引数には、final変数の<strong><em>値を</em></strong>渡せない」といったfinal指定起因の<strong><em>値</em></strong>に対する制約はない。</li>\n<li>\n<p>constは<strong><em>変数の性質</em></strong>でもあることに加えて、const変数が保持する<strong><em>値の性質</em></strong>も規定している(つまり値は「コンパイル時定数」であることを意味している)ので、const変数の<strong><em>値を</em></strong>他の変数に代入したり、関数の引数として<strong><em>値を</em></strong>渡したりするときに、constが付く・付かないで制約回避できる・できないといった差異が生じる場合がある。たとえば、以下の状況に使用できるのはコンパイル時定数のみである。</p>\n<ul>\n<li>const変数に代入</li>\n<li>省略可能パラメタのデフォルト値</li>\n<li>switch case文のcase節の式</li>\n</ul>\n</li>\n</ul>\n<h1>static指定</h1>\n<p>クラスのフィールド変数に指定し、その変数がインスタンスごとに保持されるのではなく、クラスで1つの実体を持つことを宣言する。</p>\n<p>なお、Dart言語では関数ローカルなstatic変数や、関数の外側でのstatic指定は文法上使用できず、クラススコープのstaticのみが文法上許されている。CやC++における、名前空間のコントロールのためのstaticや、C/C++/Javaにおける「可視範囲は関数ローカルだが生存期間はグローバルであることを意味するstatic」はDartでは使用できない。</p>\n<h2>staticの例</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> int i1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> i2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> int i3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> int i4 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">static</span> int i5<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> int i6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>(余談)Dartでの可視性の制御</h1>\n<p>前節で示したように、C/C++における「モジュールローカル」を意味するstaticの用法はDartには無い。Dartでのモジュール(ライブラリ)ローカルの指定は、大域変数の変数名をアンダースコア(下線, '_')で始めることで実現される。同様に、可視性をクラス内に限定するためにはフィールドやメソッド名をアンダースコアで開始する。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> int _modulePrivate <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 他モジュールに公開されない変数</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_SomeClass</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 他モジュールに公開されないクラス</span>\n  int _num<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// クラス外から不可視なフィールド</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>変数の初期化タイミング</h1>\n<p>ローカル変数は、関数が呼びだされ、その変数が宣言されているブロックに処理が入った時点で値が初期値指定があれば、その値で初期化される。この事はfinal、const、varを通じて同じである。ただし、constなローカル変数の初期化式はコンパイル時定数であることが必要である。</p>\n<p>初期化式を伴なって宣言されたconstではない大域変数、クラス変数(static変数)は、その変数の<strong><em>初回参照時</em></strong>に初期化式が評価され、値が確定する(Lazyな初期化)。constとは異なり、任意の初期化式が指定可能である。</p>\n<p>初期化指定のある大域変数やクラス変数を<strong><em>初回参照する前</em></strong>に代入したとき、初期化式は評価されず、代入する値に設定される。このことは直感的ではないかもしれないので再度強調しておくと、<strong>初期化式を伴なって宣言された大域変数やstatic変数を「参照する前に代入する」と、初期化がスキップされる。初期化式が関数呼び出しを含むのであれば、それは実行されない</strong>ということである。</p>\n<h1>表にまとめると</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">指定</th>\n<th style=\"text-align: left\">変数への再代入</th>\n<th style=\"text-align: left\">スコープ</th>\n<th style=\"text-align: left\">変数値の設定タイミング</th>\n<th style=\"text-align: left\">初期化/代入できる値</th>\n<th style=\"text-align: left\">変数の指す先の破壊的変更</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\" rowspan=\"3\">varもしくはなし</td>\n<td style=\"text-align: left\" rowspan=\"3\">可</td>\n<td style=\"text-align: left\">大域</td>\n<td style=\"text-align: left\">初回参照時(Lazy)か代入時</td>\n<td style=\"text-align: left\" rowspan=\"3\">任意</td>\n<td style=\"text-align: left\" rowspan=\"3\">可</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ローカル</td>\n<td style=\"text-align: left\">初期化</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">クラス</td>\n<td style=\"text-align: left\">コンストラクタでの初期化時、代入時</td>\n</tr>\n<tr>\n<td style=\"text-align: left\" rowspan=\"3\">final</td>\n<td style=\"text-align: left\" rowspan=\"3\">不可</td>\n<td style=\"text-align: left\">大域</td>\n<td style=\"text-align: left\">初回参照時(Lazy)</td>\n<td style=\"text-align: left\" rowspan=\"3\">任意</td>\n<td style=\"text-align: left\" rowspan=\"3\">可</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ローカル</td>\n<td style=\"text-align: left\">初期化時</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">クラス</td>\n<td style=\"text-align: left\">コンストラクタでの初期化時</td>\n</tr>\n<tr>\n<td style=\"text-align: left\" rowspan=\"2\">const</td>\n<td style=\"text-align: left\" rowspan=\"2\">不可</td>\n<td style=\"text-align: left\">大域</td>\n<td style=\"text-align: left\" rowspan=\"2\">コンパイル時に確定</td>\n<td style=\"text-align: left\" rowspan=\"2\">コンパイル時定数式</td>\n<td style=\"text-align: left\" rowspan=\"2\">不可</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ローカル</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">static var(あるいは単にstatic)</td>\n<td style=\"text-align: left\">可</td>\n<td style=\"text-align: left\" rowspan=\"3\">クラス</td>\n<td style=\"text-align: left\">初回参照時(Lazy)か代入時</td>\n<td style=\"text-align: left\" rowspan=\"2\">任意</td>\n<td style=\"text-align: left\" rowspan=\"2\">可</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">static final</td>\n<td style=\"text-align: left\">不可</td>\n<td style=\"text-align: left\">初回参照時(Lazy)</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">static const</td>\n<td style=\"text-align: left\">不可</td>\n<td style=\"text-align: left\">コンパイル時に確定</td>\n<td style=\"text-align: left\">コンパイル時定数式</td>\n<td style=\"text-align: left\">不可</td>\n</tr>\n</tbody>\n</table>\n<!--\n|指定|変数への再代入|スコープ|変数値の設定タイミング|初期化/代入できる値|変数の指す先の破壊的変更|\n|:-- |:-- |:--|:--|:--|:--|:--|\n|varもしくはなし|可|大域|初回参照時(Lazy)か代入時|任意|可|\n|||ローカル|初期化時|||\n|||クラス[*1]|コンストラクタでの初期化時、代入時|||\n|final|不可|大域|初回参照時(Lazy)|任意|可|\n|||ローカル|初期化時|||\n|||クラス[*1]|コンストラクタでの初期化時|||\n|const|不可|大域|コンパイル時に確定|コンパイル時定数式|不可\n|||ローカル||||\n|static var(あるいは単にstatic)|可|クラス|初回参照時(Lazy)か代入時|任意|可\n|static final|不可||初回参照時(Lazy)|||\n|static const|不可||コンパイル時に確定|コンパイル時定数式|不可|\n-->\n<ul>\n<li>スコープが「クラス」は、クラスのフィールドとして定義される変数の意。</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-2\">\n<p>「const値」でも通じると思われる。</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-1\">\n<p>枝を共有できるので(次に例を示す)、ツリー以外のDAGも表現できる。なお、循環構造は表現できないようである(確信はないけど。もしできるのであれば教えて欲しい)。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"January 01, 1970","path":"/https://qiita.com/uehaj/items/7c07f019e05a743d1022/index.html","title":"Dartの変数定義時の修飾static/final/const、そしてconst constructorについて","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}