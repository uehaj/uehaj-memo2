{"componentChunkName":"component---src-templates-blog-template-js","path":"/https://qiita.com/uehaj/items/1ac71855d05132d54eb8/index.html","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4274069117/uehaj-22/ref=nosim/\">TAPL本(Types And Programming Language、型システム入門)</a>の各章にある「ML実装」の例をRustにポーティングしてみます。</p>\n<p>まずは4章の算術式です。書籍でのtype termが保持するinfoは、ソースからパージングするわけではないので略します。いらなそうなletは省きました(OCamlでの必要性は不明)。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#![feature(box_patterns)]</span>\n<span class=\"token attribute attr-name\">#![feature(box_syntax)]</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug,Clone)]</span>\n<span class=\"token keyword\">enum</span> Term <span class=\"token punctuation\">{</span>\n    True<span class=\"token punctuation\">,</span>\n    False<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">If</span><span class=\"token punctuation\">(</span>Box<span class=\"token operator\">&lt;</span>Term<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Box<span class=\"token operator\">&lt;</span>Term<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Box<span class=\"token operator\">&lt;</span>Term<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Zero<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span>Box<span class=\"token operator\">&lt;</span>Term<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span>Box<span class=\"token operator\">&lt;</span>Term<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span>Box<span class=\"token operator\">&lt;</span>Term<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">use</span> Term<span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Term<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> bool <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token operator\">*</span>t <span class=\"token punctuation\">{</span>\n        Zero <span class=\"token operator\">=></span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token keyword\">ref</span> t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token keyword\">false</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">is_val</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Term<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> bool <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> <span class=\"token operator\">*</span>t <span class=\"token punctuation\">{</span>\n        True <span class=\"token operator\">=></span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n        False <span class=\"token operator\">=></span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">:</span> Term<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Term <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> t <span class=\"token punctuation\">{</span>\n        Zero <span class=\"token operator\">=></span> Zero<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span> <span class=\"token keyword\">box</span> t2<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t2<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> False<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> <span class=\"token keyword\">box</span> t3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t3<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> t1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">,</span> t3<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">,</span> t3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Zero<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token keyword\">ref</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> True<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token keyword\">ref</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> False<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token function\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_numerical</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_val</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_val</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span><span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span><span class=\"token keyword\">box</span> False<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span><span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span><span class=\"token keyword\">box</span> False<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> False<span class=\"token punctuation\">,</span><span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span><span class=\"token keyword\">box</span> False<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"False\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">If</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">box</span> True<span class=\"token punctuation\">,</span> <span class=\"token keyword\">box</span> False<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"If(True, True, False)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Succ(Succ(Zero))\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"True\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"False\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assert_eq!</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eval1</span><span class=\"token punctuation\">(</span><span class=\"token function\">IsZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Pred</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> <span class=\"token function\">Succ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">box</span> Zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"IsZero(Zero)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>boxを除けば、ほぼOCamlと同等。GCの無い言語としては、良い線に行っていると思う。</li>\n<li>実行メモリモデルがまさにC/C++なので、参照と値、cloneを完璧に適切に使いわける必要がある。OCaml版では全く意識する必要がない点である。この区別をてきとうにやっておけばうまく動く、ということはない。ここがGC言語との違い。</li>\n<li>もし完璧に適切に使いわけられないならば、それはコンパイルが通らないことを意味する。やりとげてみると、目から鱗の自然な形なのだが、最初わからないとつらい。根性しかない。</li>\n<li>今回の場合、match式の背後にある「暗黙の代入」、すなわちマッチ対象から各パターン、ガード、枝の本体に分配されるための代入が、それぞれムーブセマンティクスなのか、ownershipをとらない参照(&#x26;mutではない&#x26;)なのか、boxなのかrefなのかbox refなのか、そのすべてが正しく的確に指定されている必要がある。matchが展開された結果における暗黙の代入の様子を想像する力が問われる。どっかにドキュメントありますかね…。</li>\n<li>Rustにおけるデータ管理は、「値」が基本になる、というのはたぶん間違いない。しかし、リアルワールドでは「値だけ」でやっていくことはできない。borrwingとclone()を適宜組合せる必要がある。</li>\n</ul>","frontmatter":{"date":"January 01, 1970","path":"/https://qiita.com/uehaj/items/1ac71855d05132d54eb8/index.html","title":"TAPLのML実装をRustでやってみるシリーズ「4章 算術式のML実装」","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}