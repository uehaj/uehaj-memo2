{"componentChunkName":"component---src-templates-blog-template-js","path":"/https://qiita.com/uehaj/items/e6dd013e28593c26372d/index.html","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<h1>TL;DR</h1>\n<p>dockerで、コンテナ内で実行するプロセスを指定してのコンテナ起動方法は以下のとおり。</p>\n<ul>\n<li><code class=\"language-text\">docker run &lt;コンテナ指定&gt; &lt;プロセス指定&gt; [ &lt;プロセスに与える引数指定&gt; ]</code></li>\n</ul>\n<p>docker runで、起動するプロセスを毎回指定するのが面倒で、決まった特定のプロセスを指定したいなら、以下のどれかを選択する。</p>\n<ul>\n<li>\n<p>(ENTRYPOINTを指定しない場合)</p>\n<ul>\n<li>DockerfileのCMD項目でプロセスおよびそれへの引数を指定する。この場合、<code class=\"language-text\">docker run &lt;コンテナ指定&gt; [RET]</code> のようにプロセス指定を省略して起動したときに、CMD項目で指定した内容が起動するプロセスのおよびそれへの引数の指定となる。</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   docker run &lt;コンテナ指定&gt; &lt;プロセス指定&gt; [ &lt;プロセスに与える引数指定&gt; ]\n                            &lt;----------CMDで省略値を与えられる---------&gt; </code></pre></div>\n<ul>\n<li>\n<p>(ENTRYPOINTを指定する場合)</p>\n<ul>\n<li>\n<p>DockerfileのENTRYPOINT項目で決まった特定のプロセスを指定する。この場合、それ以外のプロセスは起動できなくなる。(もっとも/bin/shなどがENTRYPOINTで指定されているなら、/bin/shは任意のプロセスを起動する機能があるので、引数の与え型によっては任意のプロセスを起動できる。また、--entrypoint=引数で上書き指定ができる)。</p>\n<ul>\n<li>ENTRYPOINTで指定したプロセスには次のように追加引数をあたえて起動することができる。<code class=\"language-text\">docker run &lt;コンテナ指定&gt; &lt;追加引数指定&gt; RET</code></li>\n<li><code class=\"language-text\">docker run &lt;コンテナ指定&gt; RET</code>のように追加引数を指定しなかったときのデフォルトの追加引数をCMD項目から与えることができる。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   docker run &lt;コンテナ指定&gt; [ &lt;プロセスに与える追加引数指定&gt; ]\n                            &lt;--CMDで省略値を与えられる------&gt; \n   #プロセス指定はENTRYPOINTで別途与えられている。</code></pre></div>\n<h1>なぜこの文章を書いたか</h1>\n<p>Dockerfileの設定項目にはENTRYPOINTとCMDという項目があるが、これらが対になる意味をもつかのような説明や、「CMD とENTRYPOINT」のように、同列で比較対照する記事を良く見る。</p>\n<p>しかし両者は意味レベルが異なる存在であり、そのことを理解しないと良くわからないことになる(自分はなった)。また、CMDについてはもともとのDocker仕様としても、歴史的経緯っぽくてすっきりしないところがある。なので、整理してみた。</p>\n<p>結論だけ書いておくと、「ENTRYPOINTの指定」に対になるのは、「runコマンドで実行プロセスを指定する」方法であり、CMDの指定ではない。CMDは両者に対して適用可能であり、それぞれ別の意味がある。詳しくは本文参照のこと。</p>\n<h1>はじめに</h1>\n<p>CMDとENTRYPOINTは、いずれもDockerfileの設定項目であり、コンテナを「実行可能コンテナ」として使用する場合の設定。\n「実行可能コンテナ」とは、他のコンテナのベースイメージとして利用するのではなく、<code class=\"language-text\">docker run</code>で直接実行することを目的としたコンテナイメージのこと。(もっとも、コンテナは実行可能かつベースイメージとなることもできるので、この2つの種別は排他的ではない。CMDとENTRYPOINTを持つイメージを元にしてビルドした場合の動作については、別途試す)。</p>\n<h1>コンテナの実行と、起動プロセスの指定</h1>\n<p>構築されたDockerイメージに対して、コンテナを生成し、その中で <strong>何か1つのプロセスを起動・実行</strong> することで、意味のある動作をさせることができる(サーバとして継続的に実行したり、コマンドラインから1ショットで処理をするなど)。</p>\n<p>コンテナ内で起動する(唯一の)プロセスの指定方法には以下の2つがある。</p>\n<ol>\n<li>\n<p>docker run の後にコマンドを記述</p>\n<ul>\n<li>run時にイメージ内の任意のコマンドからプロセスを実行できる、自由度が高いコンテナ</li>\n<li>「docker run コマンド指定(+引数)」でプロセスを起動する</li>\n</ul>\n</li>\n<li>\n<p>Dockerfile内のENTRYPOINT項目で指定</p>\n<ul>\n<li>あらかじめビルド時に起動するプロセスが特定され、run時にはそのプロセスに対する引数だけが指定できる自由度の低いコンテナ</li>\n<li>この場合でも実行するにはdocker runでイメージを起動する</li>\n<li>この場合にdocker runの後に指定するのはプロセス指定ではなく、ENTRYPOINTで指定されるプロセスに与える引数</li>\n</ul>\n</li>\n</ol>\n<p>これら2つの指定方法は基本的に排他<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>である。つまり、ENTRYPOINTを指定したときは、runの後の記述は起動するプロセスを特定する指示としては機能しないし、<code class=\"language-text\">docker run</code>で起動するプロセスを指定できるのは、DockerfileでENDTRYPOINTを指定せずに構築されたコンテナに対してのみである。</p>\n<p>ENTRYPOINTでの指定は、ビルド時に確定してイメージに封入されてしまうことも留意。(必要ならrun --entrypoint=\"\"で上書きすることもできるとのこと)</p>\n<h2>ENTRYPOINTの意味</h2>\n<p>ENTRYPOINTは、前項「2.」の方法において、実行可能コンテナを利用する際の特定の「主たるプロセス」を起動するコマンドの指定である。「任意のコマンド」でコンテナの内容物を利用できるようにしたい場合、ENTRYPOINTを指定する必要はないし、指定すると任意のコマンドは実行できなくなる(run --entrypoint=\"\"で上書すればできるが)。</p>\n<p>ENTRYPOINTの良くある用例として、シェル(例えば<code class=\"language-text\">/bin/bash -c</code>など)を指定することもできる。この場合、「インタラクティブシェルから様々な操作をしたり-cオプションで任意のコマンドを実行を指定して起動プロセスとして実行できる、任意のコマンドを実行できるコンテナ」になる。たとえば、<code class=\"language-text\">docker run &lt;コンテナ指定&gt; --rm -it &#39;(cd /app; ls -la)&#39;</code>など。</p>\n<p>シェル以外の「主たるプロセス」の起動を指定する用例としては、例えば、「gitのコンテナ」を作る場合には、<code class=\"language-text\">/usr/bin/git</code>をENTRYPOINTに固定登録する、などである。その際には、<code class=\"language-text\">docker run</code>コマンド実行時の引数もしくはCMD指定によって、ENTRYPOINTで指定したプログラムに引数を追加して起動することができる。たとえば、<code class=\"language-text\">docker run &lt;コンテナ指定&gt; log</code>で<code class=\"language-text\">/usr/bin/git log</code>を実行するなどである。このようにENTRYPOINTで指定したプログラムにrun時に追加する引数を、本文書では「追加引数」と呼ぶ(一般的ではない)。</p>\n<h1>CMD指定の2つの意味</h1>\n<p>結局のところ、CMD指定は全く異なる2つの異なる意味をもつ。</p>\n<p>1つ目の意味は、前項「1.」の方法(docker runでコマンドを指定する)において、「docker run」で実際のコマンドを何も指定しなかったとき <strong>実行するコマンド(と引数)のデフォルト値</strong>である。</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># ENTRYPOINT項目が指定されていないとして\n  docker run &lt;コンテナ指定&gt; ls -la [enter] # 「ls -la」がコンテナ内で実行される\n  docker run &lt;コンテナ指定&gt; [enter]  # &lt;この場合に実行される「コマンドと引数」をCMD項目に設定する&gt;</code></pre></div>\n<p>2つ目の意味は、前項「2.」の方法(DockerfileのENTRYPOINT項目でコマンドを指定する)において、ENTRYPOINTに指定したコマンドの<strong>追加引数</strong>の、コマンドラインから指定しなかった場合の<strong>デフォルト値</strong>である。(「CMD」だからコマンドかと思うが、この場合はそうではない。引数なのである。ここがわかりにくい!)</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># ENTRYPOINT項目に[&quot;/usr/bin/git&quot;]が指定されているとして\n  docker run &lt;コンテナ指定&gt; status[enter]  # 「/bin/git status」がコンテナ内で実行される\n  docker run &lt;コンテナ指定&gt; [enter]  # &lt;この場合に実行される/bin/gitへの「引数」をCMD項目に設定する&gt;</code></pre></div>\n<p>いずれの場合でも、CMDはrunの後に続ける引数のデフォルト値指定であると言える。</p>\n<h2>ENTRYPOINTと追加引数</h2>\n<p>以上について、いくつかの例を通じて見ていく。</p>\n<h3>追加引数をdocker runコマンドの引数から与える</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ENTRYPOINT: /usr/bin/git</code></pre></div>\n<p>して</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run &lt;コンテナ指定&gt; checkout</code></pre></div>\n<p>とすれば、ENTRYPOINT指定に追加引数として「checkout」が追加されて、run時のコンテナ内でのプロセス起動のためのコマンドラインとしては「<code class=\"language-text\">/usr/bin/git checkout</code>」が実行される。</p>\n<h3>追加引数のデフォルト値をCMDで与える</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ENTRYPOINT: /usr/bin/git\nCMD: [&quot;status&quot;]</code></pre></div>\n<p>して</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run &lt;コンテナ指定&gt;</code></pre></div>\n<p>とすれば、コンテナ内でのプロセス起動のためのコマンドラインとしては、追加引数のデフォルト値として<code class=\"language-text\">CMD: [&quot;status&quot;]</code>が使用されて、「<code class=\"language-text\">git status</code>」が実行される。\nCMDはあくまで「<code class=\"language-text\">docker run</code>↵」で追加引数が省略されたときのデフォルト値の指定なので、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run &lt;コンテナ指定&gt; checkout</code></pre></div>\n<p>のように、明示的にrunコマンドで追加引数を与えた時には(<code class=\"language-text\">CMD: [&quot;status&quot;]</code>の指定は無視されて)、run時のコンテナ内でのプロセス起動のためのコマンドラインとしては「<code class=\"language-text\">/usr/bin/git checkout</code>」が実行される。</p>\n<h1>文字列指定と配列指定</h1>\n<p>前項では、CMD項目は、<code class=\"language-text\">CMD: &quot;status&quot;</code>のような<strong>空白区切り文字列形式</strong>ではなく、<code class=\"language-text\">CMD: [&quot;status&quot;]</code>のような<strong>配列形式</strong>で設定していた。この理由を説明する。</p>\n<p>ENTRYPOINT、CMDともに、「空白区切りの文字列」で指定すると「<code class=\"language-text\">/bin/sh -c</code>」が付与されてシェル経由、「文字列の配列」で指定するとexecシステムコールがプロセスの起動に使用される。\nCMDに関して、「<code class=\"language-text\">/bin/sh -c</code>」の付与は、ENTRYPOINTの「追加引数」として使用される場合も区別されずに適用され、「[\"/bin/sh\",\"-c\"]」が引数に含まれるようになる。この動作は意図しないものである可能性が高いので、一般には、ENTRYPOINTに対するCMDは文字列の配列形式で指定することが多いだろう。(このへんでも、CMDの仕様は、つきつめて考え抜かれている、というより、機能拡張の歴史的経緯に引きずられてるっぽい感じがするぜぇー)</p>\n<h1>まとめ</h1>\n<ul>\n<li>\n<p>実行可能コンテナ内で起動するプロセスを指定する方法は以下の1,2のいずれか</p>\n<ol>\n<li>docker runコマンドの一部で指定</li>\n<li>\n<p><code class=\"language-text\">docker run &lt;コンテナ指定&gt; XXX YYY...</code>↵の形式</p>\n<ul>\n<li>例: <code class=\"language-text\">docker run &lt;コンテナ指定&gt; /bin/sh -c echo hoge</code>↵</li>\n</ul>\n</li>\n<li>\n<p>XXXは任意のプロセスを起動するコマンド</p>\n<ul>\n<li>YYY...はそのコマンドラインに与える引数</li>\n<li>「<code class=\"language-text\">docker run &lt;コンテナ指定&gt;</code>↵」のみで「XXX YYY...」を省略した場合の「XXX YYY...」部分のデフォルト値をDockerfileのCMD項目で与えることができる</li>\n<li>例：\n<code class=\"language-text\">CMD: /bin/sh -c echo hoge</code> <br /> のとき、「<code class=\"language-text\">docker run &lt;コンテナ指定&gt;</code>↵」の実行は先述の<br/><code class=\"language-text\">docker run &lt;コンテナ指定&gt; /bin/sh echo hoge</code>↵<br/>と同じ。</li>\n</ul>\n</li>\n<li>ENTRYPOINTで指定</li>\n<li>\n<p>ENTRYPOINT: XXX YYY...の形式</p>\n<ul>\n<li>例: <code class=\"language-text\">ENTRYPOINT: /usr/bin/git</code></li>\n</ul>\n</li>\n<li>\n<p>XXXは固定の主たるプロセスを起動するコマンド(/usr/bin/git)</p>\n<ul>\n<li>YYY...はそのコマンドに与える引数(もしあれば)</li>\n</ul>\n</li>\n<li>\n<p>docker run ZZZで、追加引数を与えることができる</p>\n<ul>\n<li>例: <code class=\"language-text\">docker run &lt;コンテナ指定&gt; --version</code>↵</li>\n<li>\n<p>つまり「XXX YYY... ZZZ」というコマンドラインで起動できる</p>\n<ul>\n<li>上の例の場合： <code class=\"language-text\">/usr/bin/git --version</code>の「--version」が追加引数ZZZ</li>\n</ul>\n</li>\n<li>\n<p>「<code class=\"language-text\">docker run &lt;コンテナ指定&gt;</code>↵」のみで「ZZZ」を省略してrunした場合の、追加的引数ZZZのデフォルト値をCMDで与えることができる</p>\n<ul>\n<li>例: <code class=\"language-text\">CMD: status</code><br/> のとき、「<code class=\"language-text\">docker run &lt;コンテナ指定&gt;</code>↵」で<code class=\"language-text\">/usr/bin/git status</code>が実行される。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h1>docker-composeについて(追記)</h1>\n<p>Docker Composeのdocker-compose.ymlファイルでは、entrypointはentrypointのまま、CMDはcommand項目に対応する。</p>\n<ul>\n<li><a href=\"http://docs.docker.jp/compose/compose-file.html#entrypoint\">http://docs.docker.jp/compose/compose-file.html#entrypoint</a></li>\n<li><a href=\"http://docs.docker.jp/compose/compose-file.html#command\">http://docs.docker.jp/compose/compose-file.html#command</a></li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>よく考えると、実はENTRYPOINT項目を設定しなかった場合のデフォルト値が/bin/sh -cだと言う話で両者を説明しつくせる気がしてきた。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"January 01, 1970","path":"/https://qiita.com/uehaj/items/e6dd013e28593c26372d/index.html","title":"DockerfileのCMDとENTRYPOINTを改めて解説する","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}