{"componentChunkName":"component---src-templates-blog-template-js","path":"/https://qiita.com/uehaj/items/443580da712d2ccee159/index.html","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p>package.jsonのdependencies/devDependenciesにおいて、左端が0ではない、z.y.zという3桁のバージョンを指定する場合、以下のとおり。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">記法</th>\n<th align=\"left\">種別</th>\n<th align=\"left\">意味</th>\n<th align=\"left\">問題点など</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">^x.y.z</td>\n<td align=\"left\">キャレット表記</td>\n<td align=\"left\"><a href=\"http://semver.org/lang/ja/\">セマンティックバージョニング</a>に従う。つまり、メジャーバージョンxを指定し、マイナーバージョンyの上昇、パッチバージョンzの上昇は互換性があるはずだと信じて、「x.{y以上}.{yが同じならz以上、yが上昇していれば任意} 」にあてはまる最新のものを使う。</td>\n<td align=\"left\">開発時点と、ソース共有を経ての再ビルド(npm install)時の間で、NPMリポジトリ上の対象パッケージのバージョンが上がっている場合、より新しいものが使われることになる可能性があるが、セマンティックバージョニングの仕様に厳密に従わないパッケージは世の中に結構あるのではまり易い。</td>\n</tr>\n<tr>\n<td align=\"left\">~x.y.z</td>\n<td align=\"left\">チルダ表記</td>\n<td align=\"left\">セマンティックバージョニングにおける「マイナーバージョンが上がっても互換性が保たれるはずだ」という建前を信じないが、パッチバージョン上昇だったら互換性があるだろうとは信じて、「x.y.{z以上}」にあてはまるものを使う。</td>\n<td align=\"left\">キャレット表記に比べて、上記の可能性がパッチバージョンのみなので少ない。とはいえ、はまるときははまるだろう。</td>\n</tr>\n<tr>\n<td align=\"left\">x.y.z</td>\n<td align=\"left\">固定</td>\n<td align=\"left\">指定したバージョン「x.y.z」に厳密にあてはまるものを使う。</td>\n<td align=\"left\">開発時と異なるバージョンが使用される問題は回避できるが、たとえばセキュリテイ問題があってそのバージョンのNPMがリポジトリから削除された場合に(互換性のある後継バージョンがあるのに)ビルド不可能になったり、許容できるバージョン上昇を指定できないなど、セマンティックバージョンのメリットを全く享受できない。</td>\n</tr>\n</tbody>\n</table>\n<p>いずれも問題があるので、^なり~で指定した上で、<a href=\"https://docs.npmjs.com/files/package-lock.json\">package-lock.json</a>なり<a href=\"https://yarnpkg.com/lang/en/docs/yarn-lock/\">yarn.lock</a>を併用するのが正しい(それぞれNPM5、yarnのデフォルト動作)。</p>\n<p>これらのロックファイルを使うのは、セマンティックバージョニングの建前と本音を使いわけることである。つまり、^~をつかって「このバージョンの範囲なら、互換性に問題ないはずだ」という希望と理想をpackage.jsonに記す。それはその上で、「実際にはこのバージョン使ってビルドしましたよ、動作保証するのはこっちなんで、こちらをお使い下さいね、げっひっひ」とlockファイルを裏で提供する。</p>\n<p>左端の桁が0であったり、3桁以外の場合を含めては<a href=\"http://qiita.com/sotarok/items/4ebd4cfedab186355867\">こちら</a>の記事などを参照のこと。</p>","frontmatter":{"date":"January 01, 1970","path":"/https://qiita.com/uehaj/items/443580da712d2ccee159/index.html","title":"npmのモジュールバージョン指定におけるチルダ(~)とキャレット(^)の違いについての直感的な理解","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}