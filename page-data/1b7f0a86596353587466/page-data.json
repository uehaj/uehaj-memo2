{"componentChunkName":"component---src-templates-blog-template-js","path":"/1b7f0a86596353587466","result":{"data":{"site":{"siteMetadata":{"title":"Delog"}},"markdownRemark":{"html":"<p>NTTテクノクロスの上原です。\n業務では、社内情報のReact製自前キュレーションサイトの構築を担当しています。\nこの記事は<a href=\"https://qiita.com/advent-calendar/2018/ntt-tx\">NTTテクノクロスAdvent Calendar24日目</a>の記事であり、社内の勉強会で発表した内容をQiita記事として書きなおしたものです。タイトルは釣りです。\n(<a href=\"/1b7f0a86596353587466#20181228%E8%BF%BD%E8%A8%98\">2018/12/28追記</a>あり)</p>\n<h1>導入</h1>\n<h2>記事を書いた理由</h2>\n<p><a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a>(以降、Gatsbyと表記)は<a href=\"https://www.gatsbyjs.org/docs/performance/\">さまざまな高速化テクニック</a>を用いた「爆速サイト生成」で有名なツールですが、そのリッチな機能性は、たとえばイントラ内サイト、業務システム開発、ツール開発などでも十分に活用できるものだと思い、その可能性を紹介するために書きました。</p>\n<h2>「静的サイトジェネレータ」って何？</h2>\n<p>いわゆる「静的サイトジェネレータ(Static Site Generator, SSG)」は、CMS(コンテンツ管理システム)の一種です。代表的なものには以下があります。</p>\n<ul>\n<li><a href=\"https://jekyllrb-ja.github.io/\">Jekyll</a></li>\n<li><a href=\"https://gohugo.io/\">Hugo</a></li>\n<li><a href=\"http://octopress.org/\">Octopress</a> <br/>\n　 :</li>\n</ul>\n<p>他にも<a href=\"https://www.staticgen.com/\">多くが実装・公開</a>されています。</p>\n<p>Webサイトの公開・構築に良く使われるWordPressなどのCMSは、記事の「閲覧時」に動的にサイト内容を生成しますが、静的サイトジェネレータは、閲覧時ではなく「ビルド時」にHTMLやCSSなどをあらかじめ生成しておくことが特徴です。</p>\n<h2>一般的な利点</h2>\n<p>「静的サイトジェネレータ」の一般的な利点は以下のとおりです。</p>\n<ul>\n<li>\n<p>Webサイトのコンテンツを、サーバの設定や実行なしでAWS S3やGitHub pagesに置ける。これにより</p>\n<ul>\n<li>アプリサーバやDBが落ちるといった事象によってサイト公開が停止することがない</li>\n<li>処理負荷に強い</li>\n<li>動的CMS(Wordpress等)やアプリサーバ処理、DB処理に起因する脆弱性は回避できる</li>\n<li>背景: Wordpress(及びそのプラグイン)の脆弱性は頻繁に発見されるので対応が大変</li>\n<li>サーバの利用・運用コストを削減できる</li>\n</ul>\n</li>\n<li>CDNと相性が良くスケールしやすい</li>\n<li>Gitでコンテンツ管理ができる</li>\n</ul>\n<h2>Gatsbyとは</h2>\n<p>Gatsbyは、松田優作のCMでおなじみの...ではなく、ここではReactベースの静的サイトジェネレータです。最新のフロントエンド技術を駆使し、高速に閲覧できるサイトを生成できることで有名です。</p>\n<p>たとえば、Reactの<a href=\"https://reactjs.org/\">公式サイト</a>はGatsbyを使用したサイトですが、このサイトをDevToolsで観察しながら閲覧すると、ページをスクロールするのに応じてクリックしなくても通信が走ることがわかります。これは、Gatsbyのランタイムが、表示エリアにリンクがはいってきた時点でリンク先コンテンツをプリフェッチしメモリ中に読み込み、クリック時には瞬時に表示できるようにしているからです。このような<a href=\"https://www.gatsbyjs.org/docs/performance/\">高速化のための高度な工夫</a>が各種行われています。</p>\n<h2>わたしの疑問</h2>\n<p>自分が当初Gatsbyについて理解できていなかったのは、Reactとの関係です。</p>\n<p>静的サイトジェネレータというぐらいだから、GatsbyはReactコードをSSR(Server Side Rendering)のようにあらかじめレンダリングして、静的なHTMLを事前に生成するのかな、と思いました。だから、JSコードはビルド時のみに実行されて、閲覧時には実行されないのかな、と。</p>\n<p>このように思った理由は、他の静的サイトジェネレータの動作からの類推で、たとえばRubyベースのJekyllなどは、ビルド時にテンプレートをRubyインタプリタで評価してHTMLを生成し、閲覧時には一切Rubyコードは実行されません(されたら静的にならない)。ならば同じく、Gatsbyでも「JSコードはビルド時のみに実行されて、閲覧時には実行されない」のかなと思うじゃないですか。</p>\n<p>しかし、調べると、そうではありませんでした。</p>\n<h1>Gatsbyの特徴と動作</h1>\n<p><strong><em>GatsbyはSSR的な静的HTML生成に加えて、それと連動する通常のReactアプリも生成します。</em></strong>\nCreate React AppやNext.jsと同様に、Reactで開発する<strong><em>SPAの自由度を完全に具備する</em></strong>ものです。</p>\n<p>詳しく見てみましょう。</p>\n<h2>Create React App(CRA)の動作</h2>\n<p>まず、Gatsbyの説明をする前に、Create React Appを使ったときのReactアプリの生成と動作の様子を見てみます。下図のように、ビルド時に<code class=\"language-text\">create-react-app build</code> コマンドを実行、bundle.jsを生成し、それを読み込むindex.htmlと合わせてデプロイします。Reactアプリは、ブラウザ中で初めて実行されます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/7b9dbeed-d816-e382-74fa-79be90d036a3.png\" alt=\"output_751673bcbfe8ef280417264a4042c06d-0.png\"></p>\n<h2>一般的なSSR(Next.jsなど)の動作</h2>\n<p>次に、Next.jsなどを用いたSSR(Server Side Rendering)を見てみましょう。\nブラウザが初期ページを読み込むタイミングで、サーバ側のNode.jsでReactアプリが実行され、初期HTMLを生成(SSR)します。ブラウザがそれを読み込んで初期表示し、引き続きReactアプリを実行し、仮想DOMの更新や、SPAとしての実行にうまいこと繋げてくれます。必要があればReduxのステートの転送なども行なわれます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/d845a654-5e27-b74f-683c-02d220d7129a.png\" alt=\"output_751673bcbfe8ef280417264a4042c06d-1.png\"></p>\n<h2>Gatsbyの動作</h2>\n<p>さて、Gatsbyです。Gatsbyは、Reactアプリをビルド時に1回実行し、HTMLを生成します。HTMLを生成する動作はSSRと同様なのですが、サーバ上ではなく、ビルドマシン上で実行することが異なります。このHTMLをJSと共にデプロイし、ブラウザはそれを初期ページとして読み込み、SSRと同様にReactアプリの実行が再度なされ、仮想DOM更新、SPAとしての実行、Reduxステートなどが引き継がれます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/2da83462-0ab5-5827-4cb3-99239359b088.png\" alt=\"output_751673bcbfe8ef280417264a4042c06d-2.png\"></p>\n<p>そして、ブラウザ内でのReactアプリとしての実行は通常と同じで、API呼び出しを実行しても良いし、redux-sagaの実行など、任意の動作が可能です<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>。ただし、プリフェッチやコード分割にも関わるので、ルーティングはGatsbyの仕組みに従った方が良いでしょう<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>。Gatsbyでは、ルーティングは内部的にアクセシビリティ(a11y)向上のために<a href=\"https://www.gatsbyjs.org/blog/2018-09-27-reach-router/\">@reach/routerが使用</a>されています。</p>\n<p><a href=\"https://material-ui.com/\">Material UI</a>なども<a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-material-ui/\">プラグインを使用して</a>使用可能です(<a href=\"https://github.com/gatsbyjs/gatsby/issues/9200#issuecomment-434604930\">コード例</a>、<a href=\"https://qiita.com/github0013@github/items/f268ca6609e47298d308\">参考になるページ</a>)</p>\n<h1>Gatsby動作をもう少し詳しく</h1>\n<h2>ビルド時GraphQL</h2>\n<p>上記まででも、サイト作成には十分に便利だと思いますが、Gatsbyのもう一つの大きな特徴は、ビルド時のさまざまな処理(データ取得と変換、使用)を「<a href=\"https://www.gatsbyjs.org/docs/graphql/\">ビルド時GraphQL</a>」で統一的に行えることです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/afdcbeda-545b-f556-b8cf-57b4c2169ba9.png\" alt=\"output_751673bcbfe8ef280417264a4042c06d-3.png\"></p>\n<p>静的サイトジェネレータとしての典型的な処理は、Markdown形式のテキスト情報を、ファイルシステムから読み込んで、GraphQL経由で取得し、Reactコンポーネント内で表示することです。\nしかし、Gatsbyではそれを上記のようにdata source, data transformerという枠組みで一般化することで、多様な処理を統一的にかつ簡潔に記述することができます。</p>\n<h2>こんなこともできる</h2>\n<p>ビルド時に形成されるGraphQL DBの内容は、ブラウザ内での実行時にはアクセスできません。これはビルド時だけのものです。\nちなみにたとえば、実行時にまったく別のGraphQLサーバにアクセスすることができます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/ddb761b3-7192-4985-a9f5-36aae334829c.png\" alt=\"output_751673bcbfe8ef280417264a4042c06d-4.png\"></p>\n<h2>「ビルド時GraphQL」の結果をブラウザ内のReactコンポーネントにも渡す</h2>\n<p>さてここで一つの疑問が浮かぶかもしれません。\nビルド時に形成されるGraphQL DBの内容は、閲覧時のブラウザ内のReactアプリからはアクセスできないとしたら、ビルド時に得られたGraphQLのクエリ結果の情報は、ブラウザ内のReactコンポーネントではどのように入手できるのでしょうか? それが取得できないかぎり、SPAとしてHTMLと同じ画面を再現することはできません。\n生成物を見ると、Gatsbyはこの問題を解決するために以下のような処理をしているようです。</p>\n<ol>\n<li>ビルド時</li>\n<li>GraphQLクエリをビルド時実行</li>\n<li>クエリ結果を使ってReactアプリを静的HTMLにレンダリング</li>\n<li>このとき得られたGraphQLのクエリ結果はJSONで保存しておく。</li>\n<li>デプロイ時</li>\n<li>上記で生成された静的HTMLをデプロイ</li>\n<li>同時に、上で保存していたJSONも静的コンテンツとしてデプロイ</li>\n<li>ブラウザでの閲覧時</li>\n<li>静的HTMLを初期表示</li>\n<li>裏でReactアプリ実行、仮想DOMを再構築(SSRと同じ)</li>\n<li>保存されたJSONを読み込み、同じ表示を再現する</li>\n</ol>\n<p>まとめると、ビルド時に形成されたGarphQL DBの全体は必要ないので、「クエリの結果」のみをJSONとして合わせてデプロイし、ブラウザ内ではGraphQL DBクエリ結果取得の代りにJSON値を使うことで、同じ表示を再現するというわけです。</p>\n<h2>Gatsby Plugins</h2>\n<p>GraphQL DBを作成するために、種々の<a href=\"https://www.gatsbyjs.org/plugins/?=tranformer\">data transformer</a>,<a href=\"https://www.gatsbyjs.org/plugins/?=source\">data source</a>がプラグインとして利用可能です。</p>\n<a href=\"https://www.gatsbyjs.org/plugins/\">\n![output_751673bcbfe8ef280417264a4042c06d-5.png](https://qiita-image-store.s3.amazonaws.com/0/9979/812431ca-6ab0-f08c-6fa4-a81ec237ae36.png)\n</a>\n<h2>コード例</h2>\n<p>以下に、GraphQLを使ったGatsbyコードの例を示します。\n処理内容は、<a href=\"https://www.gatsbyjs.org/packages/gatsby-source-wordpress/\">gatsby-source-wordpress</a>を用いてWordPressからAPIでビルド時に記事をとって来て、アイキャッチ画像含めたリンクとして画面に嵌め込むというものです。</p>\n<p>Wordpress APIでビルド時に取得された情報から、以下のGraphQL クエリで一連の記事情報を取り出します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRoot</span><span class=\"token punctuation\">(</span><span class=\"token function\">withStyles</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    allWordpressPost {\n      edges {\n        node {\n          id\n          title\n          link\n          content\n          featured_media {\n            source_url\n          }\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>以下ではクエリ結果としての記事情報を、Reactコンポーネントの内容に組み込んでいます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPosts</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>IProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> classes<span class=\"token punctuation\">,</span> allWordpressPost <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div\n        className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span>classes<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token operator\">:</span> <span class=\"token string\">'1rem'</span><span class=\"token punctuation\">,</span> marginBottom<span class=\"token operator\">:</span> <span class=\"token string\">'1rem'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Grid container<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> spacing<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>allWordpressPost<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">edge</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>content <span class=\"token operator\">?</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>content <span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n            <span class=\"token keyword\">const</span> strippedContent <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/&lt;(?:.|\\n)*?>/gm</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>Grid key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span> xs<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span> sm<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> md<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> lg<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>ContentCard\n                  imageUrl<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>featured_media<span class=\"token punctuation\">.</span>source_url<span class=\"token punctuation\">}</span>\n                  heading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span>\n                  targetUrl<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>Typography component<span class=\"token operator\">=</span><span class=\"token string\">\"p\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>strippedContent<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Typography<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContentCard<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Grid<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Grid<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Gatsbyビルドのようす</h2>\n<p>上記の準備の上、プラグインの設定もした上で、以下のようにGatsbyプロジェクトをビルドできます。ビルド中にWordpress APIにアクセスしていることがわかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">% <span class=\"token function\">npm</span> run build\n<span class=\"token operator\">></span> gatsby-starter-default@1.0.0 build /Users/uehaj/work/201812/techhub-gatsby\n<span class=\"token operator\">></span> gatsby build\n\nsuccess <span class=\"token function\">open</span> and validate gatsby-configs — <span class=\"token number\">0.013</span> s\nsuccess load plugins — <span class=\"token number\">0.270</span> s\nsuccess onPreInit — <span class=\"token number\">4.173</span> s\nsuccess delete html and css files from previous builds — <span class=\"token number\">0.063</span> s\nsuccess initialize cache — <span class=\"token number\">0.006</span> s\nsuccess copy gatsby files — <span class=\"token number\">0.710</span> s\nsuccess onPreBootstrap — <span class=\"token number\">0.007</span> s\n⠂ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__POST fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">12</span>\n⢀ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__PAGE fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>\n⠐ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__wp_media fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">38</span>\n⠁ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__wp_taxonomies fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>\n⠄ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__CATEGORY fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>\n⢀ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__TAG fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13</span>\n⠈ <span class=\"token builtin class-name\">source</span> and transform nodes -<span class=\"token operator\">></span> wordpress__wp_users fetched <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>\nsuccess <span class=\"token builtin class-name\">source</span> and transform nodes — <span class=\"token number\">2.745</span> s\nsuccess building schema — <span class=\"token number\">0.798</span>\n\n  <span class=\"token builtin class-name\">:</span></code></pre></div>\n<h2>組込まれた表示例</h2>\n<p><a href=\"http://demo.wp-api.org/\">http://demo.wp-api.org/</a>サイトからWordPress API経由で記事を取得してReact画面に組み込んだ例は以下のとおり。アイキャッチ画像が設定されてないので寂しい…。</p>\n<img width=\"996\" alt=\"スクリーンショット 2018-12-30 20.40.43.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/320da9c2-a7c8-7da8-832c-1e806ebce5f4.png\">\n# まとめ\n<h2>「爆速サイト」が必要ない場合でも得られるGatsbyの利点</h2>\n<p>サイトの高速性や、CDNで大規模スケールさせることは、イントラ向けシステムやツール開発などでは必ずしも必要ではないかもしれません。しかし、仮にそれを除いたとしても、Gatsbyには以下の利点があります。</p>\n<ul>\n<li>\n<p><strong><em>通常ならDBで保持する/手書き修正のところ、ビルド時にUIに組込める</em></strong>。たとえば、</p>\n<ul>\n<li>入力フォームの「組織一覧」の選択肢を、ビルド時に他のWebサイトやAPI、CSVなどから取得し・最新化する</li>\n<li>インクリメンタルサーチの選択肢</li>\n<li>「運営からのお知らせ」情報</li>\n<li>なんらかの巡回収集</li>\n<li>運用環境からはセキュリティ上の理由でアクセス可能にさせたくない情報源から抽出した情報の組み込み</li>\n</ul>\n</li>\n<li>上記をGraphQLとプラグイン群を使って、<strong><em>極めてシンプルに書ける</em></strong>。</li>\n<li>\n<p>データの入力やオーサリングをWordPressなどCMSにまかせ、表示をカスタム化することでシステム開発を単純化できる</p>\n<ul>\n<li><strong><em>しかもPHPを書かずに !!</em></strong></li>\n<li>この用途に特化した<a href=\"https://www.google.co.jp/search?q=headless+cms&#x26;rls=com.microsoft:ja:%7Breferrer:source?%7D&#x26;ie=UTF-8&#x26;oe=UTF-8&#x26;sourceid=ie7&#x26;rlz=1I7GFRE_ja\">Headless CMSというジャンルのプロダクト</a>も出ている</li>\n</ul>\n</li>\n<li>\n<p>CD(Continuous Delivery,継続的デリバリ)と組合せると、<strong><em>有用性はさらにUP!</em></strong></p>\n<ul>\n<li>「記事をWordPressで公開したタイミングでwebhookを叩いてビルド、デプロイ」など</li>\n</ul>\n</li>\n<li>各種の便利なプラグインが使用できる </li>\n</ul>\n<h2>JAMSatckアーキテクチャ1実装としてのGatsby</h2>\n<p>ちなみに、Gatsbyのような静的サイト生成を活用したWebシステムアーキテクチャを「<a href=\"https://jamstack.org/\">JAMSatckアーキテクチャ</a>」と呼ぶそうです。下図は<a href=\"https://jamstack.org/\">https://jamstack.org/</a>より引用。</p>\n<img width=\"1133\" alt=\"スクリーンショット 2018-12-21 18.46.57.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/9979/0f5ad0bf-5663-9209-91b4-089cedee1930.png\">\n<p>以下が噛み砕いたJAMStackべからず集です。</p>\n<ul>\n<li>Wordpressを使わない</li>\n<li>ブラウジング時のSSRを使わない</li>\n<li>モノリシックではない</li>\n</ul>\n<p>利点としては、静的サイトジェネレータで得られるものすべてに加え、CDN、およびその付随機能を活用できるということです。サーバーレス時代にも向いたアーキテクチャと言えるでしょう。</p>\n<h2>おわりに</h2>\n<p>まとめますと、</p>\n<ul>\n<li>\n<p>Gatsbyを「静的サイトジェネレータ」と呼んでしまうと、「動的サイト」は作れない、という印象をもってしまうかもしれないがそうではなく<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>、React SPAとしてのすべての機能を発揮できる、CRAと同種の存在でもある。</p>\n<ul>\n<li>CRAと同様に、babelやwebpackを呼び出す</li>\n</ul>\n</li>\n<li>もちろん、Wordpress代替として爆速、CDNを駆使しスケールする、といった優れた性質をもっており、Gatsbyにとって「静的サイトをジェネレートすること」は主要な用途である。</li>\n<li>\n<p>しかしながら、Gatsbyの有効性はそれに限られず、以下のような利点があり、着目したい。</p>\n<ul>\n<li>UI構築の一部をビルド時に移動</li>\n<li>ある種の「サーバレス」を推進</li>\n<li>強力なGraphQLを駆使して、UIコード構築処理を(ビルド時に前倒しした上で)簡素化する。</li>\n</ul>\n</li>\n</ul>\n<p>と言うことで、いかがでしょうか、Gatsbyの魅力が少しでも伝われば幸いです。\nでは、みなさん良いお年を‼️(ムースをつけた両手で髪の毛をかきあげながら)</p>\n<h1>2018/12/28追記</h1>\n<p>記事を書いた後に、Gatsbyチームの方が<a href=\"https://www.reactiflux.com/transcripts/gatsby-team/\">インタビューで以下のように発言</a>されているのを見つけました。本稿「私の疑問」のところで抱いた疑問は、他にも感じる人もいたということですね。</p>\n<blockquote>\n<p>Q: What is one thing that Gatsby is capable of doing that might surprise some people? — ctlee\nA: Gatsby can be used to build fully dynamic sites, which surprises some people because of it’s label as a “static site generator”. It’s fully equipped to be a powerful alternative to create-react-app and other similar solutions with the addition of easy pre-rendering and perf baked in.</p>\n</blockquote>\n<p>(拙訳)</p>\n<ul>\n<li>Q: Gatsbyができることで、他の人が驚くかもしれないことは何ですか?</li>\n<li>A: Gatsbyはフルに動的なサイトを開発するのに使うことができるが、Gatbyを「静的サイトジェネレータ」とラベリングしている人を驚かすときもあるかもね。これはcreate-react-app(や同種のもの)の完全でパワフルな機能代替であり、加えてプリレンダリングと高性能があらかじめ組込まれているものなんだ。</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-2\">\n<p>Next.jsでもルーティングはNext.jsのルータにまかせるのと同様に。</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>とはいえ、今ビルド中なのか、ブラウザ中なのか、や、ライフサイクルフックを通じて緻密な分岐処理が必要になることもある。</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-1\">\n<p>SPAのサイトを「静的サイト」と呼べるなら静的サイトジェネレータでも良いわけだが、あまり聞かないような気がする。</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"date":"January 01, 1970","path":"/1b7f0a86596353587466","title":"Reactベース静的サイトジェネレータGatsbyの真の力をお見せします","thumbnail":null,"metaDescription":null}}},"pageContext":{}}}